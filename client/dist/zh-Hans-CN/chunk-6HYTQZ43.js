import{c as P}from"./chunk-GP5LX4CA.js";import{b as L}from"./chunk-RBCGTDIC.js";import{$ as l,B as p,Gc as b,Gf as I,Kc as x,R as f,T as S,Ue as h,Y as A,c as C,e as R,gg as y,hf as O,j as E,kg as U,m as u,v as g,x as d}from"./chunk-4A7FW7VV.js";import{a as m,g as B,j as c}from"./chunk-K6ICEIKK.js";var V=B(I());var v=(0,V.default)("peertube:subscriptions:UserSubscriptionService"),s=class s{constructor(t,e,i,o){this.authHttp=t;this.restExtractor=e;this.videoService=i;this.restService=o;c(this,"existsSubject",new R(1));c(this,"existsObservable");c(this,"myAccountSubscriptionCache",{});c(this,"myAccountSubscriptionCacheObservable",{});c(this,"myAccountSubscriptionCacheSubject",new C);this.existsObservable=g(O({time:200,notifierObservable:this.existsSubject,bulkGet:this.doSubscriptionsExist.bind(this)}).pipe(u(a=>a.response)),this.myAccountSubscriptionCacheSubject)}listFollowers(t){let{pagination:e,nameWithHost:i,search:o}=t,a=`${s.BASE_ACCOUNTS_URL}/${i}/followers`,r=new b;if(r=this.restService.addRestGetParams(r,this.restService.componentToRestPagination(e),"-createdAt"),o){let n=this.restService.parseQueryStringFilter(o,{channel:{prefix:"channel:"}});n.channel&&(a=`${s.BASE_VIDEO_CHANNELS_URL}/${n.channel}/followers`),r=this.restService.addObjectParams(r,{search:n.search})}return this.authHttp.get(a,{params:r}).pipe(p(n=>this.restExtractor.handleError(n)))}getUserSubscriptionVideos(t){let{videoPagination:e,sort:i,skipCount:o}=t,a=this.restService.componentToRestPagination(e),r=new b;return r=this.restService.addRestGetParams(r,a,i),o&&(r=r.set("skipCount",o+"")),this.authHttp.get(s.BASE_USER_SUBSCRIPTIONS_URL+"/videos",{params:r}).pipe(f(n=>this.videoService.extractVideos(n)),p(n=>this.restExtractor.handleError(n)))}deleteSubscription(t){let e=s.BASE_USER_SUBSCRIPTIONS_URL+"/"+t;return this.authHttp.delete(e).pipe(S(()=>{this.myAccountSubscriptionCache[t]=!1,this.myAccountSubscriptionCacheSubject.next(this.myAccountSubscriptionCache)}),p(i=>this.restExtractor.handleError(i)))}addSubscription(t){let e=s.BASE_USER_SUBSCRIPTIONS_URL,i={uri:t};return this.authHttp.post(e,i).pipe(S(()=>{this.myAccountSubscriptionCache[t]=!0,this.myAccountSubscriptionCacheSubject.next(this.myAccountSubscriptionCache)}),p(o=>this.restExtractor.handleError(o)))}listSubscriptions(t){let{pagination:e,search:i}=t,o=s.BASE_USER_SUBSCRIPTIONS_URL,a=this.restService.componentToRestPagination(e),r=new b;return r=this.restService.addRestGetParams(r,a),i&&(r=r.append("search",i)),this.authHttp.get(o,{params:r}).pipe(u(n=>L.extractVideoChannels(n)),p(n=>this.restExtractor.handleError(n)))}listenToMyAccountSubscriptionCacheSubject(){return this.myAccountSubscriptionCacheSubject.asObservable()}listenToSubscriptionCacheChange(t){if(t in this.myAccountSubscriptionCacheObservable)return this.myAccountSubscriptionCacheObservable[t];let e=this.existsObservable.pipe(d(i=>i[t]!==void 0),u(i=>i[t]));return this.myAccountSubscriptionCacheObservable[t]=e,e}doesSubscriptionExist(t){return v("Running subscription check for "+t),t in this.myAccountSubscriptionCache?(v("Found cache for "+t),E(this.myAccountSubscriptionCache[t])):(this.existsSubject.next(t),v("Fetching from network for "+t),this.existsObservable.pipe(d(e=>e[t]!==void 0),u(e=>e[t]),S(e=>this.myAccountSubscriptionCache[t]=e)))}doSubscriptionsExist(t){let e=s.BASE_USER_SUBSCRIPTIONS_URL+"/exist",i=new b;return i=this.restService.addObjectParams(i,{uris:t}),this.authHttp.get(e,{params:i}).pipe(S(o=>{this.myAccountSubscriptionCache=m(m({},this.myAccountSubscriptionCache),o)}),p(o=>this.restExtractor.handleError(o)))}};c(s,"BASE_USER_SUBSCRIPTIONS_URL",h.apiUrl+"/api/v1/users/me/subscriptions"),c(s,"BASE_VIDEO_CHANNELS_URL",h.apiUrl+"/api/v1/video-channels"),c(s,"BASE_ACCOUNTS_URL",h.apiUrl+"/api/v1/accounts"),c(s,"\u0275fac",function(e){return new(e||s)(l(x),l(y),l(P),l(U))}),c(s,"\u0275prov",A({token:s,factory:s.\u0275fac}));var j=s;export{j as a};
/**i18n:2f710d33ac9c4f1483429afcadbb48fcf333aac524700807e70179670fe63b48*/
