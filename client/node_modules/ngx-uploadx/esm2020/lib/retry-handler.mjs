export var ErrorType;
(function (ErrorType) {
    ErrorType[ErrorType["NotFound"] = 0] = "NotFound";
    ErrorType[ErrorType["Auth"] = 1] = "Auth";
    ErrorType[ErrorType["Retryable"] = 2] = "Retryable";
    ErrorType[ErrorType["Fatal"] = 3] = "Fatal";
})(ErrorType || (ErrorType = {}));
const defaultRetryConfig = {
    maxAttempts: 8,
    shouldRestartCodes: [404, 410],
    authErrorCodes: [401],
    shouldRetryCodes: [408, 423, 429, 460],
    shouldRetry(code) {
        return code < 400 || code >= 500 || this.shouldRetryCodes.includes(code);
    },
    minDelay: 500,
    maxDelay: 50000,
    onBusyDelay: 1000,
    timeout: 0,
    keepPartial(statusCode) {
        return statusCode >= 400;
    }
};
/**
 * Retryable ErrorHandler
 */
export class RetryHandler {
    constructor(configOptions = {}) {
        this.attempts = 0;
        this.cancel = () => { };
        this.config = Object.assign({}, defaultRetryConfig, configOptions);
    }
    /**
     * Determine error type based on response code
     * @param code - HTTP response status code
     */
    kind(code) {
        this.attempts++;
        if (this.attempts > this.config.maxAttempts) {
            return ErrorType.Fatal;
        }
        if (this.config.authErrorCodes.includes(code)) {
            return ErrorType.Auth;
        }
        if (this.config.shouldRestartCodes.includes(code)) {
            return ErrorType.NotFound;
        }
        if (this.config.shouldRetry(code, this.attempts)) {
            return ErrorType.Retryable;
        }
        return ErrorType.Fatal;
    }
    /**
     * Wait before next retry attempt
     * @param time - Delay in ms
     */
    wait(time) {
        const ms = time || Math.min(2 ** (this.attempts - 1) * this.config.minDelay, this.config.maxDelay);
        const jitter = Math.floor(Math.random() * this.config.minDelay * this.attempts);
        let id;
        return new Promise(resolve => {
            this.cancel = () => {
                clearTimeout(id);
                resolve();
            };
            id = setTimeout(this.cancel, ms + jitter);
        });
    }
    /**
     * Observes value to reset retry attempts counter
     * @param value - Value to observe
     */
    observe(value) {
        this.observedValue !== value && (this.attempts = 0);
        this.observedValue = value;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmV0cnktaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy91cGxvYWR4L2xpYi9yZXRyeS1oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBTixJQUFZLFNBS1g7QUFMRCxXQUFZLFNBQVM7SUFDbkIsaURBQVEsQ0FBQTtJQUNSLHlDQUFJLENBQUE7SUFDSixtREFBUyxDQUFBO0lBQ1QsMkNBQUssQ0FBQTtBQUNQLENBQUMsRUFMVyxTQUFTLEtBQVQsU0FBUyxRQUtwQjtBQTRCRCxNQUFNLGtCQUFrQixHQUEwQjtJQUNoRCxXQUFXLEVBQUUsQ0FBQztJQUNkLGtCQUFrQixFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQztJQUM5QixjQUFjLEVBQUUsQ0FBQyxHQUFHLENBQUM7SUFDckIsZ0JBQWdCLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUM7SUFDdEMsV0FBVyxDQUFDLElBQVk7UUFDdEIsT0FBTyxJQUFJLEdBQUcsR0FBRyxJQUFJLElBQUksSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzRSxDQUFDO0lBQ0QsUUFBUSxFQUFFLEdBQUc7SUFDYixRQUFRLEVBQUUsS0FBSztJQUNmLFdBQVcsRUFBRSxJQUFJO0lBQ2pCLE9BQU8sRUFBRSxDQUFDO0lBQ1YsV0FBVyxDQUFDLFVBQVU7UUFDcEIsT0FBTyxVQUFVLElBQUksR0FBRyxDQUFDO0lBQzNCLENBQUM7Q0FDRixDQUFDO0FBRUY7O0dBRUc7QUFDSCxNQUFNLE9BQU8sWUFBWTtJQU12QixZQUFZLGdCQUE2QixFQUFFO1FBTHBDLGFBQVEsR0FBRyxDQUFDLENBQUM7UUFHcEIsV0FBTSxHQUFlLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQztRQUc1QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLGtCQUFrQixFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFJLENBQUMsSUFBWTtRQUNmLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNoQixJQUFJLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUU7WUFDM0MsT0FBTyxTQUFTLENBQUMsS0FBSyxDQUFDO1NBQ3hCO1FBQ0QsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDN0MsT0FBTyxTQUFTLENBQUMsSUFBSSxDQUFDO1NBQ3ZCO1FBQ0QsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNqRCxPQUFPLFNBQVMsQ0FBQyxRQUFRLENBQUM7U0FDM0I7UUFDRCxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDaEQsT0FBTyxTQUFTLENBQUMsU0FBUyxDQUFDO1NBQzVCO1FBQ0QsT0FBTyxTQUFTLENBQUMsS0FBSyxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFJLENBQUMsSUFBYTtRQUNoQixNQUFNLEVBQUUsR0FDTixJQUFJLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDMUYsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2hGLElBQUksRUFBaUMsQ0FBQztRQUN0QyxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQzNCLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFO2dCQUNqQixZQUFZLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ2pCLE9BQU8sRUFBRSxDQUFDO1lBQ1osQ0FBQyxDQUFDO1lBQ0YsRUFBRSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQztRQUM1QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7O09BR0c7SUFDSCxPQUFPLENBQUMsS0FBdUI7UUFDN0IsSUFBSSxDQUFDLGFBQWEsS0FBSyxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3BELElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO0lBQzdCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBlbnVtIEVycm9yVHlwZSB7XG4gIE5vdEZvdW5kLFxuICBBdXRoLFxuICBSZXRyeWFibGUsXG4gIEZhdGFsXG59XG5cbmV4cG9ydCB0eXBlIFNob3VsZFJldHJ5RnVuY3Rpb24gPSAoY29kZTogbnVtYmVyLCBhdHRlbXB0czogbnVtYmVyKSA9PiBib29sZWFuO1xuZXhwb3J0IHR5cGUgS2VlcFBhcnRpYWxGdW5jdGlvbiA9IChjb2RlOiBudW1iZXIpID0+IGJvb2xlYW47XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmV0cnlDb25maWcge1xuICAvKiogTWF4aW11bSBudW1iZXIgb2YgcmV0cnkgYXR0ZW1wdHMgKi9cbiAgbWF4QXR0ZW1wdHM/OiBudW1iZXI7XG4gIC8qKiBVcGxvYWQgbm90IGV4aXN0IHN0YXR1cyBjb2RlcyAqL1xuICBzaG91bGRSZXN0YXJ0Q29kZXM/OiBudW1iZXJbXTtcbiAgLyoqIEJhZCB0b2tlbj8gc3RhdHVzIGNvZGVzICovXG4gIGF1dGhFcnJvckNvZGVzPzogbnVtYmVyW107XG4gIC8qKiBSZXRyeWFibGUgNHh4IHN0YXR1cyBjb2RlcyAqL1xuICBzaG91bGRSZXRyeUNvZGVzPzogbnVtYmVyW107XG4gIC8qKiBPdmVycmlkZXMgdGhlIGJ1aWx0LWluIGZ1bmN0aW9uIHRoYXQgZGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBvcGVyYXRpb24gc2hvdWxkIGJlIHJlcGVhdGVkICovXG4gIHNob3VsZFJldHJ5PzogU2hvdWxkUmV0cnlGdW5jdGlvbjtcbiAgLyoqIFRoZSBtaW5pbXVtIHJldHJ5IGRlbGF5ICovXG4gIG1pbkRlbGF5PzogbnVtYmVyO1xuICAvKiogVGhlIG1heGltdW0gcmV0cnkgZGVsYXkgKi9cbiAgbWF4RGVsYXk/OiBudW1iZXI7XG4gIC8qKiBEZWxheSB1c2VkIGJldHdlZW4gcmV0cmllcyBmb3Igbm9uLWVycm9yIHJlc3BvbnNlcyB3aXRoIG1pc3NpbmcgcmFuZ2Uvb2Zmc2V0ICovXG4gIG9uQnVzeURlbGF5PzogbnVtYmVyO1xuICAvKiogVGltZSBpbnRlcnZhbCBhZnRlciB3aGljaCBoYW5nZWQgcmVxdWVzdHMgbXVzdCBiZSByZXRyaWVkICovXG4gIHRpbWVvdXQ/OiBudW1iZXI7XG4gIC8qKiBEZXRlcm1pbmVzIHdoZXRoZXIgcGFydGlhbCBjaHVua3Mgc2hvdWxkIGJlIGtlcHQgKi9cbiAga2VlcFBhcnRpYWw/OiBib29sZWFuIHwgS2VlcFBhcnRpYWxGdW5jdGlvbjtcbn1cblxuY29uc3QgZGVmYXVsdFJldHJ5Q29uZmlnOiBSZXF1aXJlZDxSZXRyeUNvbmZpZz4gPSB7XG4gIG1heEF0dGVtcHRzOiA4LFxuICBzaG91bGRSZXN0YXJ0Q29kZXM6IFs0MDQsIDQxMF0sXG4gIGF1dGhFcnJvckNvZGVzOiBbNDAxXSxcbiAgc2hvdWxkUmV0cnlDb2RlczogWzQwOCwgNDIzLCA0MjksIDQ2MF0sXG4gIHNob3VsZFJldHJ5KGNvZGU6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIHJldHVybiBjb2RlIDwgNDAwIHx8IGNvZGUgPj0gNTAwIHx8IHRoaXMuc2hvdWxkUmV0cnlDb2Rlcy5pbmNsdWRlcyhjb2RlKTtcbiAgfSxcbiAgbWluRGVsYXk6IDUwMCxcbiAgbWF4RGVsYXk6IDUwMDAwLFxuICBvbkJ1c3lEZWxheTogMTAwMCxcbiAgdGltZW91dDogMCxcbiAga2VlcFBhcnRpYWwoc3RhdHVzQ29kZSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBzdGF0dXNDb2RlID49IDQwMDtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXRyeWFibGUgRXJyb3JIYW5kbGVyXG4gKi9cbmV4cG9ydCBjbGFzcyBSZXRyeUhhbmRsZXIge1xuICBwdWJsaWMgYXR0ZW1wdHMgPSAwO1xuICBjb25maWc6IFJlcXVpcmVkPFJldHJ5Q29uZmlnPjtcbiAgcHJpdmF0ZSBvYnNlcnZlZFZhbHVlPzogc3RyaW5nIHwgbnVtYmVyO1xuICBjYW5jZWw6ICgpID0+IHZvaWQgPSAoKSA9PiB7fTtcblxuICBjb25zdHJ1Y3Rvcihjb25maWdPcHRpb25zOiBSZXRyeUNvbmZpZyA9IHt9KSB7XG4gICAgdGhpcy5jb25maWcgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0UmV0cnlDb25maWcsIGNvbmZpZ09wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZSBlcnJvciB0eXBlIGJhc2VkIG9uIHJlc3BvbnNlIGNvZGVcbiAgICogQHBhcmFtIGNvZGUgLSBIVFRQIHJlc3BvbnNlIHN0YXR1cyBjb2RlXG4gICAqL1xuICBraW5kKGNvZGU6IG51bWJlcik6IEVycm9yVHlwZSB7XG4gICAgdGhpcy5hdHRlbXB0cysrO1xuICAgIGlmICh0aGlzLmF0dGVtcHRzID4gdGhpcy5jb25maWcubWF4QXR0ZW1wdHMpIHtcbiAgICAgIHJldHVybiBFcnJvclR5cGUuRmF0YWw7XG4gICAgfVxuICAgIGlmICh0aGlzLmNvbmZpZy5hdXRoRXJyb3JDb2Rlcy5pbmNsdWRlcyhjb2RlKSkge1xuICAgICAgcmV0dXJuIEVycm9yVHlwZS5BdXRoO1xuICAgIH1cbiAgICBpZiAodGhpcy5jb25maWcuc2hvdWxkUmVzdGFydENvZGVzLmluY2x1ZGVzKGNvZGUpKSB7XG4gICAgICByZXR1cm4gRXJyb3JUeXBlLk5vdEZvdW5kO1xuICAgIH1cbiAgICBpZiAodGhpcy5jb25maWcuc2hvdWxkUmV0cnkoY29kZSwgdGhpcy5hdHRlbXB0cykpIHtcbiAgICAgIHJldHVybiBFcnJvclR5cGUuUmV0cnlhYmxlO1xuICAgIH1cbiAgICByZXR1cm4gRXJyb3JUeXBlLkZhdGFsO1xuICB9XG5cbiAgLyoqXG4gICAqIFdhaXQgYmVmb3JlIG5leHQgcmV0cnkgYXR0ZW1wdFxuICAgKiBAcGFyYW0gdGltZSAtIERlbGF5IGluIG1zXG4gICAqL1xuICB3YWl0KHRpbWU/OiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBtcyA9XG4gICAgICB0aW1lIHx8IE1hdGgubWluKDIgKiogKHRoaXMuYXR0ZW1wdHMgLSAxKSAqIHRoaXMuY29uZmlnLm1pbkRlbGF5LCB0aGlzLmNvbmZpZy5tYXhEZWxheSk7XG4gICAgY29uc3Qgaml0dGVyID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGhpcy5jb25maWcubWluRGVsYXkgKiB0aGlzLmF0dGVtcHRzKTtcbiAgICBsZXQgaWQ6IFJldHVyblR5cGU8dHlwZW9mIHNldFRpbWVvdXQ+O1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIHRoaXMuY2FuY2VsID0gKCkgPT4ge1xuICAgICAgICBjbGVhclRpbWVvdXQoaWQpO1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9O1xuICAgICAgaWQgPSBzZXRUaW1lb3V0KHRoaXMuY2FuY2VsLCBtcyArIGppdHRlcik7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogT2JzZXJ2ZXMgdmFsdWUgdG8gcmVzZXQgcmV0cnkgYXR0ZW1wdHMgY291bnRlclxuICAgKiBAcGFyYW0gdmFsdWUgLSBWYWx1ZSB0byBvYnNlcnZlXG4gICAqL1xuICBvYnNlcnZlKHZhbHVlPzogc3RyaW5nIHwgbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5vYnNlcnZlZFZhbHVlICE9PSB2YWx1ZSAmJiAodGhpcy5hdHRlbXB0cyA9IDApO1xuICAgIHRoaXMub2JzZXJ2ZWRWYWx1ZSA9IHZhbHVlO1xuICB9XG59XG4iXX0=