import { Uploader } from './uploader';
import { b64, resolveUrl } from './utils';
/**
 * Implements tus resumable upload protocol
 * {@link https://github.com/tus/tus-resumable-upload-protocol/blob/master/protocol.md  Github}
 */
export class Tus extends Uploader {
    constructor() {
        super(...arguments);
        this.headers = { 'Tus-Resumable': '1.0.0' };
    }
    async getFileUrl() {
        const encodedMetaData = b64.serialize(this.metadata);
        const headers = {
            'Upload-Length': this.size,
            'Upload-Metadata': encodedMetaData
        };
        await this.request({ method: 'POST', url: this.endpoint, headers });
        this.offset = this.getOffsetFromResponse() || (this.responseStatus === 201 ? 0 : undefined);
        const location = this.getValueFromResponse('location');
        if (!location) {
            throw new Error('Invalid or missing Location header');
        }
        return resolveUrl(location, this.endpoint);
    }
    async sendFileContent() {
        const { body, start, end } = this.getChunk();
        const headers = {
            'Content-Type': 'application/offset+octet-stream',
            'Upload-Offset': start
        };
        await this.request({ method: 'PATCH', body, headers });
        return this.getOffsetFromResponse() || end;
    }
    async getOffset() {
        await this.request({ method: 'HEAD' });
        return this.getOffsetFromResponse();
    }
    getOffsetFromResponse() {
        const offset = this.getValueFromResponse('Upload-Offset');
        return offset ? parseInt(offset, 10) : undefined;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3VwbG9hZHgvbGliL3R1cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRTFDOzs7R0FHRztBQUNILE1BQU0sT0FBTyxHQUFJLFNBQVEsUUFBUTtJQUFqQzs7UUFDRSxZQUFPLEdBQUcsRUFBRSxlQUFlLEVBQUUsT0FBTyxFQUFFLENBQUM7SUFvQ3pDLENBQUM7SUFsQ0MsS0FBSyxDQUFDLFVBQVU7UUFDZCxNQUFNLGVBQWUsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNyRCxNQUFNLE9BQU8sR0FBRztZQUNkLGVBQWUsRUFBRSxJQUFJLENBQUMsSUFBSTtZQUMxQixpQkFBaUIsRUFBRSxlQUFlO1NBQ25DLENBQUM7UUFDRixNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDcEUsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMscUJBQXFCLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzVGLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN2RCxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2IsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO1NBQ3ZEO1FBQ0QsT0FBTyxVQUFVLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsS0FBSyxDQUFDLGVBQWU7UUFDbkIsTUFBTSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQzdDLE1BQU0sT0FBTyxHQUFHO1lBQ2QsY0FBYyxFQUFFLGlDQUFpQztZQUNqRCxlQUFlLEVBQUUsS0FBSztTQUN2QixDQUFDO1FBQ0YsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUN2RCxPQUFPLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxJQUFJLEdBQUcsQ0FBQztJQUM3QyxDQUFDO0lBRUQsS0FBSyxDQUFDLFNBQVM7UUFDYixNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUN2QyxPQUFPLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0lBQ3RDLENBQUM7SUFFUyxxQkFBcUI7UUFDN0IsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQzFELE9BQU8sTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDbkQsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVXBsb2FkZXIgfSBmcm9tICcuL3VwbG9hZGVyJztcbmltcG9ydCB7IGI2NCwgcmVzb2x2ZVVybCB9IGZyb20gJy4vdXRpbHMnO1xuXG4vKipcbiAqIEltcGxlbWVudHMgdHVzIHJlc3VtYWJsZSB1cGxvYWQgcHJvdG9jb2xcbiAqIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vdHVzL3R1cy1yZXN1bWFibGUtdXBsb2FkLXByb3RvY29sL2Jsb2IvbWFzdGVyL3Byb3RvY29sLm1kICBHaXRodWJ9XG4gKi9cbmV4cG9ydCBjbGFzcyBUdXMgZXh0ZW5kcyBVcGxvYWRlciB7XG4gIGhlYWRlcnMgPSB7ICdUdXMtUmVzdW1hYmxlJzogJzEuMC4wJyB9O1xuXG4gIGFzeW5jIGdldEZpbGVVcmwoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCBlbmNvZGVkTWV0YURhdGEgPSBiNjQuc2VyaWFsaXplKHRoaXMubWV0YWRhdGEpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAnVXBsb2FkLUxlbmd0aCc6IHRoaXMuc2l6ZSxcbiAgICAgICdVcGxvYWQtTWV0YWRhdGEnOiBlbmNvZGVkTWV0YURhdGFcbiAgICB9O1xuICAgIGF3YWl0IHRoaXMucmVxdWVzdCh7IG1ldGhvZDogJ1BPU1QnLCB1cmw6IHRoaXMuZW5kcG9pbnQsIGhlYWRlcnMgfSk7XG4gICAgdGhpcy5vZmZzZXQgPSB0aGlzLmdldE9mZnNldEZyb21SZXNwb25zZSgpIHx8ICh0aGlzLnJlc3BvbnNlU3RhdHVzID09PSAyMDEgPyAwIDogdW5kZWZpbmVkKTtcbiAgICBjb25zdCBsb2NhdGlvbiA9IHRoaXMuZ2V0VmFsdWVGcm9tUmVzcG9uc2UoJ2xvY2F0aW9uJyk7XG4gICAgaWYgKCFsb2NhdGlvbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG9yIG1pc3NpbmcgTG9jYXRpb24gaGVhZGVyJyk7XG4gICAgfVxuICAgIHJldHVybiByZXNvbHZlVXJsKGxvY2F0aW9uLCB0aGlzLmVuZHBvaW50KTtcbiAgfVxuXG4gIGFzeW5jIHNlbmRGaWxlQ29udGVudCgpOiBQcm9taXNlPG51bWJlciB8IHVuZGVmaW5lZD4ge1xuICAgIGNvbnN0IHsgYm9keSwgc3RhcnQsIGVuZCB9ID0gdGhpcy5nZXRDaHVuaygpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL29mZnNldCtvY3RldC1zdHJlYW0nLFxuICAgICAgJ1VwbG9hZC1PZmZzZXQnOiBzdGFydFxuICAgIH07XG4gICAgYXdhaXQgdGhpcy5yZXF1ZXN0KHsgbWV0aG9kOiAnUEFUQ0gnLCBib2R5LCBoZWFkZXJzIH0pO1xuICAgIHJldHVybiB0aGlzLmdldE9mZnNldEZyb21SZXNwb25zZSgpIHx8IGVuZDtcbiAgfVxuXG4gIGFzeW5jIGdldE9mZnNldCgpOiBQcm9taXNlPG51bWJlciB8IHVuZGVmaW5lZD4ge1xuICAgIGF3YWl0IHRoaXMucmVxdWVzdCh7IG1ldGhvZDogJ0hFQUQnIH0pO1xuICAgIHJldHVybiB0aGlzLmdldE9mZnNldEZyb21SZXNwb25zZSgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldE9mZnNldEZyb21SZXNwb25zZSgpOiBudW1iZXIgfCB1bmRlZmluZWQge1xuICAgIGNvbnN0IG9mZnNldCA9IHRoaXMuZ2V0VmFsdWVGcm9tUmVzcG9uc2UoJ1VwbG9hZC1PZmZzZXQnKTtcbiAgICByZXR1cm4gb2Zmc2V0ID8gcGFyc2VJbnQob2Zmc2V0LCAxMCkgOiB1bmRlZmluZWQ7XG4gIH1cbn1cbiJdfQ==