import { inject, Injectable, NgZone } from '@angular/core';
import { fromEvent, Subject } from 'rxjs';
import { debounceTime, map } from 'rxjs/operators';
import { UPLOADX_AJAX } from './ajax';
import { IdService } from './id.service';
import { UPLOADX_FACTORY_OPTIONS, UPLOADX_OPTIONS } from './options';
import { store } from './store';
import { iosOverride, isBrowser, onLine, pick } from './utils';
import * as i0 from "@angular/core";
export const UPLOAD_STATE_KEYS = [
    'file',
    'name',
    'progress',
    'remaining',
    'response',
    'responseHeaders',
    'responseStatus',
    'size',
    'speed',
    'status',
    'uploadId',
    'url'
];
const DUE_TIME = 5;
export class UploadxService {
    constructor() {
        /** Upload Queue */
        this.queue = [];
        this.eventsStream = new Subject();
        this.subs = [];
        this.ngZone = inject(NgZone);
        this.ajax = inject(UPLOADX_AJAX);
        this.idService = inject(IdService);
        this.stateChange = (uploader) => {
            this.ngZone.run(() => this.eventsStream.next(pick(uploader, UPLOAD_STATE_KEYS)));
            if (uploader.status !== 'uploading' && uploader.status !== 'added') {
                this.ngZone.runOutsideAngular(() => setTimeout(() => this.processQueue()));
            }
        };
        const options = inject(UPLOADX_OPTIONS, { optional: true });
        const defaults = inject(UPLOADX_FACTORY_OPTIONS);
        this.options = Object.assign({}, defaults, options);
        if (isBrowser()) {
            this.subs.push(fromEvent(window, 'online').subscribe(() => this.control({ action: 'upload' })), fromEvent(window, 'offline').subscribe(() => this.control({ action: 'pause' })));
        }
    }
    /** Upload status events */
    get events() {
        return this.eventsStream.asObservable();
    }
    /**
     * Initializes service
     * @param options global module options
     * @returns Observable that emits a new value on progress or status changes
     */
    init(options = {}) {
        Object.assign(this.options, options);
        return this.events;
    }
    /**
     * Initializes service
     * @param options global module options
     * @returns Observable that emits the current array of uploaders
     */
    connect(options) {
        return this.init(options).pipe(map(() => this.queue), debounceTime(DUE_TIME));
    }
    /**
     * Terminates all uploads and clears the queue
     */
    disconnect() {
        this.queue.forEach(uploader => (uploader.status = 'paused'));
        this.queue = [];
    }
    /**
     * Returns current uploads state
     * @example
     * // restore background uploads
     * this.uploads = this.uploadService.state();
     */
    state() {
        return this.queue.map(uploader => pick(uploader, UPLOAD_STATE_KEYS));
    }
    ngOnDestroy() {
        this.disconnect();
        this.subs.forEach(sub => sub.unsubscribe());
    }
    /**
     * Creates uploaders for files and adds them to the upload queue
     */
    handleFiles(files, options = {}) {
        const instanceOptions = { ...this.options, ...iosOverride, ...options };
        store.clear(instanceOptions.storeIncompleteHours);
        this.options.concurrency = instanceOptions.concurrency;
        ('name' in files ? [files] : Array.from(files)).forEach(file => this.addUploaderInstance(file, instanceOptions));
    }
    /**
     * Upload control
     * @example
     * // pause all
     * this.uploadService.control({ action: 'pause' });
     * // pause upload with uploadId
     * this.uploadService.control({ action: 'pause', uploadId});
     * // set token
     * this.uploadService.control({ token: `TOKEN` });
     */
    control(evt) {
        const target = evt.uploadId
            ? this.queue.filter(({ uploadId }) => uploadId === evt.uploadId)
            : this.queue;
        target.forEach(uploader => uploader.configure(evt));
    }
    /**
     * Number of active uploads
     */
    get activeUploadsCount() {
        return this.queue.filter(({ status }) => status === 'uploading' || status === 'retry').length;
    }
    /**
     * Performs http requests
     */
    async request(config) {
        config.data || (config.data = config.body);
        return this.ajax.request(config);
    }
    async addUploaderInstance(file, options) {
        const uploader = new options.uploaderClass(file, options, this.stateChange, this.ajax);
        uploader.uploadId = await this.idService.generateId(uploader);
        this.queue.push(uploader);
        uploader.status = 'added';
        if (options.autoUpload && onLine()) {
            uploader.status = 'queue';
        }
    }
    processQueue() {
        this.queue = this.queue.filter(({ status }) => status !== 'cancelled');
        this.queue
            .filter(({ status }) => status === 'queue')
            .slice(0, Math.max(this.options.concurrency - this.activeUploadsCount, 0))
            .forEach(uploader => uploader.upload());
    }
}
UploadxService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: UploadxService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
UploadxService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: UploadxService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: UploadxService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,