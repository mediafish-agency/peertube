const KiB = 1024;
/**
 * Adaptive chunk size
 */
export class DynamicChunk {
    /**
     * Scales the chunk size based on the throughput.
     * If the elapsed time to upload a chunk is less than the min time, increase the chunk size.
     * If the elapsed time is more than the max time, decrease the chunk size.
     * Keeps the chunk size within the min and max limits.
     * @param throughput - represents the upload rate in bytes/sec.
     */
    static scale(throughput) {
        const elapsedTime = DynamicChunk.size / throughput;
        if (elapsedTime < DynamicChunk.minChunkTime) {
            DynamicChunk.size = Math.min(DynamicChunk.maxSize, DynamicChunk.size * 2);
        }
        if (elapsedTime > DynamicChunk.maxChunkTime) {
            DynamicChunk.size = Math.max(DynamicChunk.minSize, DynamicChunk.size / 2);
        }
        return DynamicChunk.size;
    }
}
/** Maximum chunk size in bytes */
DynamicChunk.maxSize = Number.MAX_SAFE_INTEGER;
/** Minimum chunk size in bytes */
DynamicChunk.minSize = 256 * KiB;
/** Initial chunk size in bytes */
DynamicChunk.size = 4 * (256 * KiB);
DynamicChunk.minChunkTime = 8;
DynamicChunk.maxChunkTime = 24;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1jaHVuay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy91cGxvYWR4L2xpYi9keW5hbWljLWNodW5rLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQztBQUNqQjs7R0FFRztBQUNILE1BQU0sT0FBTyxZQUFZO0lBVXZCOzs7Ozs7T0FNRztJQUNILE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBa0I7UUFDN0IsTUFBTSxXQUFXLEdBQUcsWUFBWSxDQUFDLElBQUksR0FBRyxVQUFVLENBQUM7UUFDbkQsSUFBSSxXQUFXLEdBQUcsWUFBWSxDQUFDLFlBQVksRUFBRTtZQUMzQyxZQUFZLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQzNFO1FBQ0QsSUFBSSxXQUFXLEdBQUcsWUFBWSxDQUFDLFlBQVksRUFBRTtZQUMzQyxZQUFZLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQzNFO1FBQ0QsT0FBTyxZQUFZLENBQUMsSUFBSSxDQUFDO0lBQzNCLENBQUM7O0FBekJELGtDQUFrQztBQUMzQixvQkFBTyxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztBQUN6QyxrQ0FBa0M7QUFDM0Isb0JBQU8sR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQzNCLGtDQUFrQztBQUMzQixpQkFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztBQUN2Qix5QkFBWSxHQUFHLENBQUMsQ0FBQztBQUNqQix5QkFBWSxHQUFHLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEtpQiA9IDEwMjQ7XG4vKipcbiAqIEFkYXB0aXZlIGNodW5rIHNpemVcbiAqL1xuZXhwb3J0IGNsYXNzIER5bmFtaWNDaHVuayB7XG4gIC8qKiBNYXhpbXVtIGNodW5rIHNpemUgaW4gYnl0ZXMgKi9cbiAgc3RhdGljIG1heFNpemUgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcbiAgLyoqIE1pbmltdW0gY2h1bmsgc2l6ZSBpbiBieXRlcyAqL1xuICBzdGF0aWMgbWluU2l6ZSA9IDI1NiAqIEtpQjtcbiAgLyoqIEluaXRpYWwgY2h1bmsgc2l6ZSBpbiBieXRlcyAqL1xuICBzdGF0aWMgc2l6ZSA9IDQgKiAoMjU2ICogS2lCKTtcbiAgc3RhdGljIG1pbkNodW5rVGltZSA9IDg7XG4gIHN0YXRpYyBtYXhDaHVua1RpbWUgPSAyNDtcblxuICAvKipcbiAgICogU2NhbGVzIHRoZSBjaHVuayBzaXplIGJhc2VkIG9uIHRoZSB0aHJvdWdocHV0LlxuICAgKiBJZiB0aGUgZWxhcHNlZCB0aW1lIHRvIHVwbG9hZCBhIGNodW5rIGlzIGxlc3MgdGhhbiB0aGUgbWluIHRpbWUsIGluY3JlYXNlIHRoZSBjaHVuayBzaXplLlxuICAgKiBJZiB0aGUgZWxhcHNlZCB0aW1lIGlzIG1vcmUgdGhhbiB0aGUgbWF4IHRpbWUsIGRlY3JlYXNlIHRoZSBjaHVuayBzaXplLlxuICAgKiBLZWVwcyB0aGUgY2h1bmsgc2l6ZSB3aXRoaW4gdGhlIG1pbiBhbmQgbWF4IGxpbWl0cy5cbiAgICogQHBhcmFtIHRocm91Z2hwdXQgLSByZXByZXNlbnRzIHRoZSB1cGxvYWQgcmF0ZSBpbiBieXRlcy9zZWMuXG4gICAqL1xuICBzdGF0aWMgc2NhbGUodGhyb3VnaHB1dDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBjb25zdCBlbGFwc2VkVGltZSA9IER5bmFtaWNDaHVuay5zaXplIC8gdGhyb3VnaHB1dDtcbiAgICBpZiAoZWxhcHNlZFRpbWUgPCBEeW5hbWljQ2h1bmsubWluQ2h1bmtUaW1lKSB7XG4gICAgICBEeW5hbWljQ2h1bmsuc2l6ZSA9IE1hdGgubWluKER5bmFtaWNDaHVuay5tYXhTaXplLCBEeW5hbWljQ2h1bmsuc2l6ZSAqIDIpO1xuICAgIH1cbiAgICBpZiAoZWxhcHNlZFRpbWUgPiBEeW5hbWljQ2h1bmsubWF4Q2h1bmtUaW1lKSB7XG4gICAgICBEeW5hbWljQ2h1bmsuc2l6ZSA9IE1hdGgubWF4KER5bmFtaWNDaHVuay5taW5TaXplLCBEeW5hbWljQ2h1bmsuc2l6ZSAvIDIpO1xuICAgIH1cbiAgICByZXR1cm4gRHluYW1pY0NodW5rLnNpemU7XG4gIH1cbn1cbiJdfQ==