import { InjectionToken } from '@angular/core';
function createXhr() {
    return new XMLHttpRequest();
}
function releaseXhr(_xhr) {
    _xhr = null;
}
export class UploadxAjax {
    constructor(buildXhr) {
        this.buildXhr = buildXhr;
        this.request = ({ method = 'GET', data = null, headers = {}, url, responseType, signal, onUploadProgress, timeout = 0, withCredentials = false, validateStatus = status => status < 400 && status >= 200 }) => {
            return new Promise((resolve, reject) => {
                const xhr = this.buildXhr();
                const abortListener = () => xhr && xhr.readyState !== xhr.DONE && xhr.abort();
                signal?.addEventListener('abort', abortListener, { once: true });
                xhr.open(method, url, true);
                xhr.timeout = timeout;
                withCredentials && (xhr.withCredentials = true);
                if (responseType && responseType !== 'json') {
                    xhr.responseType = responseType;
                }
                Object.keys(headers).forEach(key => xhr.setRequestHeader(key, String(headers[key])));
                xhr.upload.onprogress = onUploadProgress || null;
                xhr.onerror =
                    xhr.ontimeout =
                        xhr.onabort =
                            evt => {
                                releaseXhr(xhr);
                                signal?.removeEventListener('abort', abortListener);
                                return reject({ error: evt.type, url, method });
                            };
                xhr.onload = () => {
                    const response = {
                        data: this.getResponseBody(xhr, responseType),
                        status: xhr.status,
                        headers: this.getResponseHeaders(xhr)
                    };
                    releaseXhr(xhr);
                    signal?.removeEventListener('abort', abortListener);
                    return validateStatus(response.status) ? resolve(response) : reject(response);
                };
                xhr.send(data);
            });
        };
    }
    getResponseHeaders(xhr) {
        const rows = xhr.getAllResponseHeaders().split(/[\r\n]+/);
        return rows.reduce((headers, current) => {
            const [name, value] = current.split(': ');
            name && (headers[name.toLowerCase()] = value);
            return headers;
        }, {});
    }
    getResponseBody(xhr, responseType) {
        let body = typeof xhr.response === 'undefined' ? xhr.responseText : xhr.response;
        if (responseType === 'json' && body && typeof body === 'string') {
            try {
                body = JSON.parse(body);
            }
            catch { }
        }
        return body;
    }
}
export const UPLOADX_AJAX = new InjectionToken('uploadx.ajax', {
    factory: () => new UploadxAjax(createXhr),
    providedIn: 'root'
});
//# sourceMappingURL=data:application/json;base64,