{"version":3,"file":"ngx-uploadx.mjs","sources":["../../../src/uploadx/lib/ajax.ts","../../../src/uploadx/lib/canceler.ts","../../../src/uploadx/lib/dynamic-chunk.ts","../../../src/uploadx/lib/utils.ts","../../../src/uploadx/lib/id.service.ts","../../../src/uploadx/lib/retry-handler.ts","../../../src/uploadx/lib/store.ts","../../../src/uploadx/lib/uploader.ts","../../../src/uploadx/lib/uploaderx.ts","../../../src/uploadx/lib/options.ts","../../../src/uploadx/lib/tus.ts","../../../src/uploadx/lib/uploadx.service.ts","../../../src/uploadx/lib/uploadx.directive.ts","../../../src/uploadx/lib/uploadx-drop.directive.ts","../../../src/uploadx/lib/uploadx.module.ts","../../../src/uploadx/lib/uploadx.provider.ts","../../../src/uploadx/ngx-uploadx.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { RequestOptions } from './interfaces';\n\nexport interface AjaxRequestConfig extends RequestOptions {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [x: string]: any;\n\n  data?: BodyInit | null;\n  url: string;\n}\n\nexport interface AjaxResponse<T> {\n  data: T;\n  status: number;\n  headers: Record<string, string>;\n}\n\nexport interface Ajax {\n  request: <T = string>(config: AjaxRequestConfig) => Promise<AjaxResponse<T>>;\n}\n\nfunction createXhr(): XMLHttpRequest {\n  return new XMLHttpRequest();\n}\n\nfunction releaseXhr(_xhr: unknown): void {\n  _xhr = null;\n}\n\nexport class UploadxAjax {\n  constructor(private buildXhr: () => XMLHttpRequest) {}\n\n  request = <T = string>({\n    method = 'GET',\n    data = null,\n    headers = {},\n    url,\n    responseType,\n    signal,\n    onUploadProgress,\n    timeout = 0,\n    withCredentials = false,\n    validateStatus = status => status < 400 && status >= 200\n  }: AjaxRequestConfig): Promise<AjaxResponse<T>> => {\n    return new Promise((resolve, reject) => {\n      const xhr = this.buildXhr();\n      const abortListener = () => xhr && xhr.readyState !== xhr.DONE && xhr.abort();\n      signal?.addEventListener('abort', abortListener, { once: true });\n      xhr.open(method, url, true);\n      xhr.timeout = timeout;\n      withCredentials && (xhr.withCredentials = true);\n      if (responseType && responseType !== 'json') {\n        xhr.responseType = responseType;\n      }\n      Object.keys(headers).forEach(key => xhr.setRequestHeader(key, String(headers[key])));\n      xhr.upload.onprogress = onUploadProgress || null;\n      xhr.onerror =\n        xhr.ontimeout =\n        xhr.onabort =\n          evt => {\n            releaseXhr(xhr);\n            signal?.removeEventListener('abort', abortListener);\n            return reject({ error: evt.type, url, method });\n          };\n      xhr.onload = () => {\n        const response = {\n          data: this.getResponseBody<T>(xhr, responseType),\n          status: xhr.status,\n          headers: this.getResponseHeaders(xhr)\n        };\n        releaseXhr(xhr);\n        signal?.removeEventListener('abort', abortListener);\n        return validateStatus(response.status) ? resolve(response) : reject(response);\n      };\n      xhr.send(data as XMLHttpRequestBodyInit);\n    });\n  };\n\n  getResponseHeaders(xhr: XMLHttpRequest): Record<string, string> {\n    const rows = xhr.getAllResponseHeaders().split(/[\\r\\n]+/);\n    return rows.reduce((headers: Record<string, string>, current) => {\n      const [name, value] = current.split(': ');\n      name && (headers[name.toLowerCase()] = value);\n      return headers;\n    }, {});\n  }\n\n  getResponseBody<T>(xhr: XMLHttpRequest, responseType?: string): T {\n    let body = typeof xhr.response === 'undefined' ? xhr.responseText : xhr.response;\n    if (responseType === 'json' && body && typeof body === 'string') {\n      try {\n        body = JSON.parse(body);\n      } catch {}\n    }\n    return body;\n  }\n}\n\nexport const UPLOADX_AJAX: InjectionToken<Ajax> = new InjectionToken('uploadx.ajax', {\n  factory: () => new UploadxAjax(createXhr),\n  providedIn: 'root'\n});\n","/**\n * Allows canceling some operation by calling cancel().\n * onCancel callback can be used to execute cleanup logic when cancel is called.\n */\nexport class Canceler {\n  /**\n   * Callback function to execute cleanup logic when cancel() is called\n   */\n  onCancel = (): void => {};\n\n  /**\n   * Cancels the operation.\n   */\n  cancel(): void {\n    this.onCancel();\n    this.onCancel = () => {};\n  }\n}\n","const KiB = 1024;\n/**\n * Adaptive chunk size\n */\nexport class DynamicChunk {\n  /** Maximum chunk size in bytes */\n  static maxSize = Number.MAX_SAFE_INTEGER;\n  /** Minimum chunk size in bytes */\n  static minSize = 256 * KiB;\n  /** Initial chunk size in bytes */\n  static size = 4 * (256 * KiB);\n  static minChunkTime = 8;\n  static maxChunkTime = 24;\n\n  /**\n   * Scales the chunk size based on the throughput.\n   * If the elapsed time to upload a chunk is less than the min time, increase the chunk size.\n   * If the elapsed time is more than the max time, decrease the chunk size.\n   * Keeps the chunk size within the min and max limits.\n   * @param throughput - represents the upload rate in bytes/sec.\n   */\n  static scale(throughput: number): number {\n    const elapsedTime = DynamicChunk.size / throughput;\n    if (elapsedTime < DynamicChunk.minChunkTime) {\n      DynamicChunk.size = Math.min(DynamicChunk.maxSize, DynamicChunk.size * 2);\n    }\n    if (elapsedTime > DynamicChunk.maxChunkTime) {\n      DynamicChunk.size = Math.max(DynamicChunk.minSize, DynamicChunk.size / 2);\n    }\n    return DynamicChunk.size;\n  }\n}\n","function safeMatch(base: string, re: RegExp): string {\n  return (base.match(re) || [''])[0];\n}\n\nexport function resolveUrl(url: string, base: string): string {\n  if (url.indexOf('https://') * url.indexOf('http://') === 0) return url;\n  if (url.indexOf('//') === 0) return safeMatch(base, /^(https?:)/) + url;\n  if (url.indexOf('/') === 0) return safeMatch(base, /^(?:https?:)?(?:\\/\\/)?([^\\/?]+)/) + url;\n  return safeMatch(base, /^(?:https?:)?(?:\\/\\/)?([^\\/?]+)?(.*\\/)/) + url;\n}\n\n/**\n * Unwraps a value if it is a function, otherwise returns the value directly.\n * Useful for allowing values to optionally be specified as functions.\n */\nexport function unfunc<T, V>(value: T | ((ref: V) => T), ref: V): T {\n  return value instanceof Function ? value(ref) : value;\n}\n\nexport const pick = <T, K extends keyof T>(obj: T, props: K[]): Pick<T, K> => {\n  const result = {} as Pick<T, K>;\n  props.forEach(key => (result[key] = obj[key]));\n  return result;\n};\n\nexport function isNumber(x?: unknown): x is number {\n  return x === Number(x);\n}\n\n/**\n * 32-bit FNV-1a hash function\n */\nexport function createHash(str: string): number {\n  let hash = 2166136261;\n  const len = str.length;\n  for (let i = 0; i < len; i++) {\n    hash ^= str.charCodeAt(i);\n    hash += (hash << 1) + (hash << 4) + (hash << 7) + (hash << 8) + (hash << 24);\n  }\n  return hash >>> 0;\n}\n\n/**\n * Utility functions for base64 encoding and decoding strings and objects.\n */\nexport const b64 = {\n  encode: (str: string): string =>\n    btoa(\n      encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, (match, p1) =>\n        String.fromCharCode(Number.parseInt(p1, 16))\n      )\n    ),\n  decode: (str: string): string =>\n    decodeURIComponent(\n      atob(str)\n        .split('')\n        .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\n        .join('')\n    ),\n\n  serialize: (obj: Record<string, unknown>): string =>\n    Object.keys(obj)\n      .map(key => [key, b64.encode(String(obj[key]))].filter(Boolean).join(' '))\n      .toString(),\n\n  parse: (encoded: string): Record<string, string> => {\n    const kvPairs = encoded.split(',').map(kv => kv.split(' '));\n    const decoded: Record<string, string> = {};\n    for (const [key, value] of kvPairs) {\n      if (key) decoded[key] = value ? b64.decode(value) : '';\n    }\n    return decoded;\n  }\n};\n\nexport function isBrowser(): boolean {\n  return ![typeof window, typeof navigator].includes('undefined');\n}\n\nexport function onLine(): boolean {\n  return isBrowser() ? navigator.onLine : true;\n}\n\nexport function isIOS(): boolean {\n  return isBrowser() && /iPad|iPhone/.test(navigator.userAgent);\n}\n\nexport function osVersion() {\n  const m = /OS (\\d+)_(\\d+)_?(\\d+)?/.exec(navigator.userAgent);\n  if (m?.length) return m[1] + '.' + m[2] + '.' + m[3] || '0';\n  return;\n}\n\nexport function compareVersions(a: string, b: string): number {\n  return a.localeCompare(b, undefined, { numeric: true });\n}\n\nexport function isBadIOS() {\n  return isIOS() && compareVersions(osVersion() || '0.0', '15.3') < 0;\n}\n\n/**\n * [Big files upload error with iOS](https://github.com/kukhariev/ngx-uploadx/issues/316)\n * TODO: move to app\n */\nexport const iosOverride = isBadIOS()\n  ? { chunkSize: 0, retryConfig: { shouldRetry: () => false } }\n  : {};\n","import { Injectable } from '@angular/core';\nimport { Uploader } from './uploader';\nimport { createHash } from './utils';\n\nexport interface UidService {\n  generateId(uploader: Uploader): Promise<string> | string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IdService implements UidService {\n  generateId(uploader: Uploader): Promise<string> | string {\n    const print = JSON.stringify({\n      ...uploader.metadata,\n      type: uploader.constructor.name,\n      endpoint: uploader.endpoint\n    });\n    return createHash(uploader.name + uploader.size).toString(16) + createHash(print).toString(16);\n  }\n}\n","export enum ErrorType {\n  NotFound,\n  Auth,\n  Retryable,\n  Fatal\n}\n\nexport type ShouldRetryFunction = (code: number, attempts: number) => boolean;\nexport type KeepPartialFunction = (code: number) => boolean;\n\nexport interface RetryConfig {\n  /** Maximum number of retry attempts */\n  maxAttempts?: number;\n  /** Upload not exist status codes */\n  shouldRestartCodes?: number[];\n  /** Bad token? status codes */\n  authErrorCodes?: number[];\n  /** Retryable 4xx status codes */\n  shouldRetryCodes?: number[];\n  /** Overrides the built-in function that determines whether the operation should be repeated */\n  shouldRetry?: ShouldRetryFunction;\n  /** The minimum retry delay */\n  minDelay?: number;\n  /** The maximum retry delay */\n  maxDelay?: number;\n  /** Delay used between retries for non-error responses with missing range/offset */\n  onBusyDelay?: number;\n  /** Time interval after which hanged requests must be retried */\n  timeout?: number;\n  /** Determines whether partial chunks should be kept */\n  keepPartial?: boolean | KeepPartialFunction;\n}\n\nconst defaultRetryConfig: Required<RetryConfig> = {\n  maxAttempts: 8,\n  shouldRestartCodes: [404, 410],\n  authErrorCodes: [401],\n  shouldRetryCodes: [408, 423, 429, 460],\n  shouldRetry(code: number): boolean {\n    return code < 400 || code >= 500 || this.shouldRetryCodes.includes(code);\n  },\n  minDelay: 500,\n  maxDelay: 50000,\n  onBusyDelay: 1000,\n  timeout: 0,\n  keepPartial(statusCode): boolean {\n    return statusCode >= 400;\n  }\n};\n\n/**\n * Retryable ErrorHandler\n */\nexport class RetryHandler {\n  public attempts = 0;\n  config: Required<RetryConfig>;\n  private observedValue?: string | number;\n  cancel: () => void = () => {};\n\n  constructor(configOptions: RetryConfig = {}) {\n    this.config = Object.assign({}, defaultRetryConfig, configOptions);\n  }\n\n  /**\n   * Determine error type based on response code\n   * @param code - HTTP response status code\n   */\n  kind(code: number): ErrorType {\n    this.attempts++;\n    if (this.attempts > this.config.maxAttempts) {\n      return ErrorType.Fatal;\n    }\n    if (this.config.authErrorCodes.includes(code)) {\n      return ErrorType.Auth;\n    }\n    if (this.config.shouldRestartCodes.includes(code)) {\n      return ErrorType.NotFound;\n    }\n    if (this.config.shouldRetry(code, this.attempts)) {\n      return ErrorType.Retryable;\n    }\n    return ErrorType.Fatal;\n  }\n\n  /**\n   * Wait before next retry attempt\n   * @param time - Delay in ms\n   */\n  wait(time?: number): Promise<void> {\n    const ms =\n      time || Math.min(2 ** (this.attempts - 1) * this.config.minDelay, this.config.maxDelay);\n    const jitter = Math.floor(Math.random() * this.config.minDelay * this.attempts);\n    let id: ReturnType<typeof setTimeout>;\n    return new Promise(resolve => {\n      this.cancel = () => {\n        clearTimeout(id);\n        resolve();\n      };\n      id = setTimeout(this.cancel, ms + jitter);\n    });\n  }\n\n  /**\n   * Observes value to reset retry attempts counter\n   * @param value - Value to observe\n   */\n  observe(value?: string | number): void {\n    this.observedValue !== value && (this.attempts = 0);\n    this.observedValue = value;\n  }\n}\n","const HOUR = 1000 * 60 * 60;\n\nexport class Store<T = string> {\n  private ttl = 24 * HOUR;\n  constructor(readonly prefix = 'UPLOADX-v4.0-') {}\n\n  set(key: string, value: T): void {\n    this.ttl &&\n      localStorage.setItem(this.prefix + key, JSON.stringify([value, Date.now() + this.ttl]));\n  }\n\n  get(key: string): T | null {\n    const item = localStorage.getItem(this.prefix + key);\n    if (item) {\n      const [value, expires] = JSON.parse(item);\n      return value && expires ? value : null;\n    }\n    return null;\n  }\n\n  delete(key: string): void {\n    localStorage.removeItem(this.prefix + key);\n  }\n\n  clear(maxAgeHours = 0): void {\n    this.ttl = maxAgeHours * HOUR;\n    const now = Date.now();\n    this.keys().forEach(key => {\n      const item = localStorage.getItem(key);\n      if (item && maxAgeHours) {\n        const [, expires] = JSON.parse(item);\n        now > Number(expires) && localStorage.removeItem(key);\n      } else {\n        localStorage.removeItem(key);\n      }\n    });\n  }\n\n  private keys(): string[] {\n    return Object.keys(localStorage).filter(key => key.indexOf(this.prefix) === 0);\n  }\n}\n\nexport const store = isLocalStorageAvailable() ? new Store() : new Map<string, string>();\n\nexport function isLocalStorageAvailable(): boolean {\n  try {\n    const key = 'LocalStorageTest';\n    const value = 'value';\n    localStorage.setItem(key, value);\n    const getValue = localStorage.getItem(key);\n    localStorage.removeItem(key);\n    return getValue === value;\n  } catch {\n    return false;\n  }\n}\n","import { Ajax, AjaxRequestConfig } from './ajax';\nimport { Canceler } from './canceler';\nimport { DynamicChunk } from './dynamic-chunk';\nimport {\n  AuthorizeRequest,\n  Metadata,\n  PreRequest,\n  RequestConfig,\n  RequestHeaders,\n  RequestOptions,\n  ResponseBody,\n  UploadAction,\n  UploaderOptions,\n  UploadState,\n  UploadStatus,\n  UploadxControlEvent\n} from './interfaces';\nimport { ErrorType, RetryHandler } from './retry-handler';\nimport { store } from './store';\nimport { isNumber, unfunc } from './utils';\n\nconst actionToStatusMap: { [K in UploadAction]: UploadStatus } = {\n  pause: 'paused',\n  upload: 'queue',\n  cancel: 'cancelled',\n  update: 'updated'\n};\n\n/**\n * Uploader Base Class\n */\nexport abstract class Uploader implements UploadState {\n  name: string;\n  readonly size: number;\n  readonly uploadId!: string;\n  response: ResponseBody = null;\n  responseStatus = 0;\n  responseHeaders: Record<string, string> = {};\n  progress = 0;\n  remaining!: number;\n  speed = 0;\n  /** Custom headers */\n  headers: RequestHeaders = {};\n  /** Metadata Object */\n  metadata: Metadata;\n  /** Upload endpoint */\n  endpoint = '/upload';\n  /** Chunk size in bytes */\n  chunkSize = 0;\n  /** Auth token/tokenGetter */\n  token: UploadxControlEvent['token'];\n  /** Byte offset within the whole file */\n  offset?: number;\n  /** Retries handler */\n  retry: RetryHandler;\n  canceler = new Canceler();\n  abortController = new AbortController();\n  /** Set HttpRequest responseType */\n  responseType?: 'json' | 'text' | 'document';\n  private _eventsCount = 0;\n  private readonly _authorize: AuthorizeRequest;\n  private readonly _prerequest: PreRequest;\n  private _token!: string;\n\n  constructor(\n    readonly file: File,\n    readonly options: Readonly<UploaderOptions>,\n    readonly stateChange: (uploader: Uploader) => void,\n    readonly ajax: Ajax\n  ) {\n    this.retry = new RetryHandler(options.retryConfig);\n    this.name = file.name;\n    this.size = file.size;\n    this.metadata = {\n      name: file.name,\n      mimeType: file.type || 'application/octet-stream',\n      size: file.size,\n      lastModified: file.lastModified\n    };\n    options.maxChunkSize && (DynamicChunk.maxSize = options.maxChunkSize);\n    this._prerequest = options.prerequest || (req => req);\n    this._authorize = options.authorize || (req => req);\n    this.configure(options);\n  }\n\n  private _url = '';\n\n  get url(): string {\n    return this._url || store.get(this.uploadId) || '';\n  }\n\n  set url(value: string) {\n    this._url !== value && store.set(this.uploadId, value);\n    this._url = value;\n  }\n\n  private _status!: UploadStatus;\n\n  get status(): UploadStatus {\n    return this._status;\n  }\n\n  set status(s: UploadStatus) {\n    if (s !== 'updated' && s !== 'cancelled') {\n      if (this._status === s) return;\n      if (this._status === 'complete') return;\n    }\n    if (this._status === 'cancelled') return;\n    if (this._status === 'uploading' && s === 'queue') return;\n    if (this._status === 'retry') this.retry.cancel();\n    this._status = s;\n    if (s === 'paused') this.abort();\n    if (s === 'cancelled' || s === 'complete' || s === 'error') this.cleanup();\n    if (s === 'cancelled') this.cancelAndSendState();\n    else if (s === 'updated') this.updateAndSendState();\n    else this.stateChange(this);\n  }\n\n  /**\n   * Configure uploader\n   */\n  configure({ metadata, headers, token, endpoint, action }: UploadxControlEvent): void {\n    endpoint && (this.endpoint = endpoint);\n    token && (this.token = token);\n    metadata && Object.assign(this.metadata, unfunc(metadata, this.file));\n    headers && Object.assign(this.headers, unfunc(headers, this.file));\n    action && (this.status = actionToStatusMap[action]);\n  }\n\n  /**\n   * Starts uploading\n   */\n  async upload(): Promise<void> {\n    do {\n      this.status = 'uploading';\n      try {\n        this._token ||= await this.updateToken();\n        this.url ||= await this.getFileUrl();\n        if (this.offset !== this.size) {\n          this.offset = isNumber(this.offset)\n            ? await this.sendFileContent()\n            : await this.getOffset();\n        }\n        this.retry.observe(this.offset);\n        if (this.offset === this.size) {\n          this.remaining = 0;\n          this.progress = 100;\n          this.status = 'complete';\n        } else if (!isNumber(this.offset)) {\n          this.stateChange(this);\n          await this.retry.wait(this.getRetryAfterFromBackend() || this.retry.config.onBusyDelay);\n        }\n      } catch (e) {\n        e instanceof Error && console.error(e);\n        if (this.status !== 'uploading') {\n          return;\n        }\n        switch (this.retry.kind(this.responseStatus)) {\n          case ErrorType.Fatal:\n            this.status = 'error';\n            return;\n          case ErrorType.NotFound:\n            this.url = '';\n            break;\n          case ErrorType.Auth:\n            this._token = '';\n            break;\n          default:\n            if (unfunc(this.retry.config.keepPartial, this.responseStatus)) {\n              this.offset = undefined;\n            }\n            this.status = 'retry';\n            await this.retry.wait(this.getRetryAfterFromBackend());\n        }\n      }\n    } while (['uploading', 'retry', 'updated'].includes(this._status));\n  }\n\n  /**\n   * Performs http requests\n   */\n  async request(requestOptions: RequestOptions): Promise<void> {\n    this.responseStatus = 0;\n    this.response = null;\n    this.responseHeaders = {};\n    if (this.abortController.signal.aborted) {\n      this.abortController = new AbortController();\n    }\n    const signal = requestOptions.signal || this.abortController.signal;\n    let req: RequestConfig = {\n      body: requestOptions.body || null,\n      canceler: this.canceler,\n      signal,\n      headers: { ...this.headers, ...requestOptions.headers },\n      method: requestOptions.method || 'GET',\n      url: requestOptions.url || this.url\n    };\n    if (!requestOptions.skipAuthorization) {\n      req = await this._authorize(req, this._token);\n    }\n    const { body = null, headers, method, url = req.url } = (await this._prerequest(req)) || req;\n    const ajaxRequestConfig: AjaxRequestConfig = {\n      method,\n      headers: { ...req.headers, ...headers },\n      url,\n      data: body,\n      responseType: this.options.responseType ?? this.responseType,\n      withCredentials: !!this.options.withCredentials,\n      canceler: this.canceler,\n      signal,\n      validateStatus: () => true,\n      timeout: this.retry.config.timeout\n    };\n    if (isNumber(this.offset) && body && typeof body === 'object') {\n      ajaxRequestConfig.onUploadProgress = this.onProgress();\n    }\n    const response = await this.ajax.request(ajaxRequestConfig);\n    this.response = response.data;\n    this.responseHeaders = response.headers;\n    this.responseStatus = response.status;\n    if (response.status >= 400) {\n      return Promise.reject();\n    }\n  }\n\n  /**\n   * Set auth token string\n   */\n  updateToken = (): string | Promise<string> => {\n    return unfunc(this.token || '', this.responseStatus);\n  };\n\n  /**\n   * Get file URI\n   */\n  protected abstract getFileUrl(): Promise<string>;\n\n  /**\n   * Send file content and return an offset for the next request\n   */\n  protected abstract sendFileContent(): Promise<number | undefined>;\n\n  /**\n   * Get an offset for the next request\n   */\n  protected abstract getOffset(): Promise<number | undefined>;\n\n  /**\n   *  Updating the metadata of the upload\n   */\n  protected update<T = { metadata?: Metadata }>(_data: T): Promise<string> {\n    return Promise.reject('Not implemented');\n  }\n\n  protected abort(): void {\n    this.offset = undefined;\n    this.abortController.abort();\n    this.canceler.cancel();\n  }\n\n  protected async cancel(): Promise<void> {\n    this.abort();\n    if (this.url) {\n      await this.request({ method: 'DELETE' }).catch(() => {});\n    }\n  }\n\n  /**\n   * Gets the value from the response\n   */\n  protected getValueFromResponse(key: string): string | null {\n    return this.responseHeaders[key.toLowerCase()] || null;\n  }\n\n  /**\n   * Get file chunk\n   * @param offset - number of bytes of the file to skip\n   * @param size - chunk size\n   */\n  getChunk(offset?: number, size?: number): { start: number; end: number; body: Blob } {\n    if (this.responseStatus === 413) {\n      DynamicChunk.maxSize = DynamicChunk.size = Math.floor(DynamicChunk.size / 2);\n    }\n    this.chunkSize =\n      this.options.chunkSize === 0 ? this.size : this.options.chunkSize || DynamicChunk.size;\n    const start = offset ?? this.offset ?? 0;\n    const end = Math.min(start + (size || this.chunkSize), this.size);\n    const body = this.file.slice(start, end);\n    return { start, end, body };\n  }\n\n  private getRetryAfterFromBackend(): number {\n    return Number(this.getValueFromResponse('retry-after')) * 1000;\n  }\n\n  private cancelAndSendState() {\n    this.cancel().then(() => this.stateChange(this), console.error);\n  }\n\n  private updateAndSendState(): void {\n    this.update({ metadata: this.metadata }).then(() => this.stateChange(this), console.error);\n  }\n\n  private cleanup = () => {\n    store.delete(this._url);\n    store.delete(this.uploadId);\n  };\n\n  private onProgress(): (evt: ProgressEvent) => void {\n    let throttle: ReturnType<typeof setTimeout> | undefined;\n    const startTime = Date.now();\n    return ({ loaded }) => {\n      const current = loaded / ((Date.now() - startTime) / 1000);\n      this.speed = ~~((this.speed * this._eventsCount + current) / ++this._eventsCount);\n      DynamicChunk.scale(this.speed);\n      if (!throttle) {\n        throttle = setTimeout(() => (throttle = undefined), 500);\n        const uploaded = (this.offset || 0) + loaded;\n        this.progress = +((uploaded / this.size) * 100).toFixed(2);\n        this.remaining = ~~((this.size - uploaded) / this.speed);\n        this.stateChange(this);\n      }\n    };\n  }\n}\n","import { Uploader } from './uploader';\nimport { resolveUrl } from './utils';\n\n/**\n * Implements XHR/CORS Resumable Upload\n * {@link https://github.com/kukhariev/node-uploadx/blob/master/proto.md Github}\n * @see {@link https://developers.google.com/drive/api/v3/manage-uploads#resumable Google Drive API documentation}\n */\nexport class UploaderX extends Uploader {\n  responseType = 'json' as const;\n\n  async getFileUrl(): Promise<string> {\n    const body = JSON.stringify(this.metadata);\n    const headers = {\n      'Content-Type': 'application/json; charset=utf-8',\n      'X-Upload-Content-Length': this.size,\n      'X-Upload-Content-Type': this.file.type || 'application/octet-stream'\n    };\n    await this.request({ method: 'POST', body, url: this.endpoint, headers });\n    this.offset = this.getOffsetFromResponse() || (this.responseStatus === 201 ? 0 : undefined);\n    const location = this.getValueFromResponse('location');\n    if (!location) {\n      throw new Error('Invalid or missing Location header');\n    }\n    return resolveUrl(location, this.endpoint);\n  }\n\n  async sendFileContent(): Promise<number | undefined> {\n    const { body, start, end } = this.getChunk();\n    const headers = {\n      'Content-Type': 'application/octet-stream',\n      'Content-Range': `bytes ${start}-${end - 1}/${this.size}`\n    };\n    await this.request({ method: 'PUT', body, headers });\n    return this.responseStatus > 201 ? this.getOffsetFromResponse() : end;\n  }\n\n  async getOffset(): Promise<number | undefined> {\n    const headers = {\n      'Content-Type': 'application/octet-stream',\n      'Content-Range': `bytes */${this.size}`\n    };\n    await this.request({ method: 'PUT', headers });\n    return this.responseStatus > 201 ? this.getOffsetFromResponse() : this.size;\n  }\n\n  async update<T>(data: T): Promise<string> {\n    const body = JSON.stringify(data);\n    const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n    await this.request({ method: 'PATCH', body, headers });\n    const location = this.getValueFromResponse('location') || this.url;\n    return resolveUrl(location, this.endpoint);\n  }\n\n  protected getOffsetFromResponse(): number | undefined {\n    const range = this.getValueFromResponse('Range');\n    return range ? getRangeEnd(range) + 1 : undefined;\n  }\n}\n\nexport function getRangeEnd(range = ''): number {\n  const end = parseInt(range.split(/-/)[1], 10);\n  return end >= 0 ? end : -1;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Ajax } from './ajax';\nimport { AuthorizeRequest, UploaderOptions } from './interfaces';\nimport { Uploader } from './uploader';\nimport { UploaderX } from './uploaderx';\n\n/**\n * Global Module Options\n */\nexport interface UploadxOptions extends UploaderOptions {\n  /**\n   * Provide a user-defined class to support another upload protocol or to extend an existing one.\n   * @defaultValue UploadX\n   */\n  uploaderClass?: UploaderClass;\n  /**\n   * Set the maximum parallel uploads\n   * @defaultValue 2\n   */\n  concurrency?: number;\n  /**\n   * Automatically start upload when files added\n   * @defaultValue true\n   */\n  autoUpload?: boolean;\n  /**\n   * File types the user can pick from the file input\n   */\n  allowedTypes?: string;\n  /**\n   * Add 'multiple' attribute\n   * @defaultValue true\n   */\n  multiple?: boolean;\n  /**\n   * Retention time for incomplete uploads\n   * @defaultValue 24\n   */\n  storeIncompleteHours?: number;\n}\n\nexport interface UploadxFactoryOptions extends UploadxOptions {\n  endpoint: string;\n  autoUpload: boolean;\n  concurrency: number;\n  uploaderClass: UploaderClass;\n  authorize: AuthorizeRequest;\n  storeIncompleteHours: number;\n}\n\nexport type UploaderClass = new (\n  file: File,\n  options: UploaderOptions,\n  stateChange: (uploader: Uploader) => void,\n  ajax: Ajax\n) => Uploader;\n\nconst defaultOptions: UploadxFactoryOptions = {\n  endpoint: '/upload',\n  autoUpload: true,\n  concurrency: 2,\n  uploaderClass: UploaderX,\n  authorize: (req, token) => {\n    token && (req.headers['Authorization'] = `Bearer ${token}`);\n    return req;\n  },\n  storeIncompleteHours: 24\n};\n\nexport const UPLOADX_FACTORY_OPTIONS = new InjectionToken<UploadxFactoryOptions>(\n  'uploadx.factory.options',\n  { providedIn: 'root', factory: () => defaultOptions }\n);\nexport const UPLOADX_OPTIONS = new InjectionToken<UploadxOptions>('uploadx.options');\n","import { Uploader } from './uploader';\nimport { b64, resolveUrl } from './utils';\n\n/**\n * Implements tus resumable upload protocol\n * {@link https://github.com/tus/tus-resumable-upload-protocol/blob/master/protocol.md  Github}\n */\nexport class Tus extends Uploader {\n  headers = { 'Tus-Resumable': '1.0.0' };\n\n  async getFileUrl(): Promise<string> {\n    const encodedMetaData = b64.serialize(this.metadata);\n    const headers = {\n      'Upload-Length': this.size,\n      'Upload-Metadata': encodedMetaData\n    };\n    await this.request({ method: 'POST', url: this.endpoint, headers });\n    this.offset = this.getOffsetFromResponse() || (this.responseStatus === 201 ? 0 : undefined);\n    const location = this.getValueFromResponse('location');\n    if (!location) {\n      throw new Error('Invalid or missing Location header');\n    }\n    return resolveUrl(location, this.endpoint);\n  }\n\n  async sendFileContent(): Promise<number | undefined> {\n    const { body, start, end } = this.getChunk();\n    const headers = {\n      'Content-Type': 'application/offset+octet-stream',\n      'Upload-Offset': start\n    };\n    await this.request({ method: 'PATCH', body, headers });\n    return this.getOffsetFromResponse() || end;\n  }\n\n  async getOffset(): Promise<number | undefined> {\n    await this.request({ method: 'HEAD' });\n    return this.getOffsetFromResponse();\n  }\n\n  protected getOffsetFromResponse(): number | undefined {\n    const offset = this.getValueFromResponse('Upload-Offset');\n    return offset ? parseInt(offset, 10) : undefined;\n  }\n}\n","import { inject, Injectable, NgZone, OnDestroy } from '@angular/core';\nimport { fromEvent, Observable, Subject, Subscription } from 'rxjs';\nimport { debounceTime, map } from 'rxjs/operators';\nimport { AjaxRequestConfig, AjaxResponse, UPLOADX_AJAX } from './ajax';\nimport { IdService } from './id.service';\nimport { UploadState, UploadxControlEvent } from './interfaces';\nimport {\n  UPLOADX_FACTORY_OPTIONS,\n  UPLOADX_OPTIONS,\n  UploadxFactoryOptions,\n  UploadxOptions\n} from './options';\nimport { store } from './store';\nimport { Uploader } from './uploader';\nimport { iosOverride, isBrowser, onLine, pick } from './utils';\n\nexport const UPLOAD_STATE_KEYS: (keyof UploadState)[] = [\n  'file',\n  'name',\n  'progress',\n  'remaining',\n  'response',\n  'responseHeaders',\n  'responseStatus',\n  'size',\n  'speed',\n  'status',\n  'uploadId',\n  'url'\n];\n\nconst DUE_TIME = 5;\n\n@Injectable({ providedIn: 'root' })\nexport class UploadxService implements OnDestroy {\n  /** Upload Queue */\n  queue: Uploader[] = [];\n  readonly options: UploadxFactoryOptions;\n  private readonly eventsStream: Subject<UploadState> = new Subject();\n  private subs: Subscription[] = [];\n  private ngZone = inject(NgZone);\n  readonly ajax = inject(UPLOADX_AJAX);\n  private idService = inject(IdService);\n\n  constructor() {\n    const options = inject(UPLOADX_OPTIONS, { optional: true });\n    const defaults = inject(UPLOADX_FACTORY_OPTIONS);\n    this.options = Object.assign({}, defaults, options);\n    if (isBrowser()) {\n      this.subs.push(\n        fromEvent(window, 'online').subscribe(() => this.control({ action: 'upload' })),\n        fromEvent(window, 'offline').subscribe(() => this.control({ action: 'pause' }))\n      );\n    }\n  }\n\n  /** Upload status events */\n  get events(): Observable<UploadState> {\n    return this.eventsStream.asObservable();\n  }\n\n  /**\n   * Initializes service\n   * @param options global module options\n   * @returns Observable that emits a new value on progress or status changes\n   */\n  init(options: UploadxOptions = {}): Observable<UploadState> {\n    Object.assign(this.options, options);\n    return this.events;\n  }\n\n  /**\n   * Initializes service\n   * @param options global module options\n   * @returns Observable that emits the current array of uploaders\n   */\n  connect(options?: UploadxOptions): Observable<Uploader[]> {\n    return this.init(options).pipe(\n      map(() => this.queue),\n      debounceTime(DUE_TIME)\n    );\n  }\n\n  /**\n   * Terminates all uploads and clears the queue\n   */\n  disconnect(): void {\n    this.queue.forEach(uploader => (uploader.status = 'paused'));\n    this.queue = [];\n  }\n\n  /**\n   * Returns current uploads state\n   * @example\n   * // restore background uploads\n   * this.uploads = this.uploadService.state();\n   */\n  state(): UploadState[] {\n    return this.queue.map(uploader => pick(uploader, UPLOAD_STATE_KEYS));\n  }\n\n  ngOnDestroy(): void {\n    this.disconnect();\n    this.subs.forEach(sub => sub.unsubscribe());\n  }\n\n  /**\n   * Creates uploaders for files and adds them to the upload queue\n   */\n  handleFiles(files: FileList | File | File[], options = {} as UploadxOptions): void {\n    const instanceOptions: UploadxFactoryOptions = { ...this.options, ...iosOverride, ...options };\n    store.clear(instanceOptions.storeIncompleteHours);\n    this.options.concurrency = instanceOptions.concurrency;\n    ('name' in files ? [files] : Array.from(files)).forEach(file =>\n      this.addUploaderInstance(file, instanceOptions)\n    );\n  }\n\n  /**\n   * Upload control\n   * @example\n   * // pause all\n   * this.uploadService.control({ action: 'pause' });\n   * // pause upload with uploadId\n   * this.uploadService.control({ action: 'pause', uploadId});\n   * // set token\n   * this.uploadService.control({ token: `TOKEN` });\n   */\n  control(evt: UploadxControlEvent): void {\n    const target = evt.uploadId\n      ? this.queue.filter(({ uploadId }) => uploadId === evt.uploadId)\n      : this.queue;\n    target.forEach(uploader => uploader.configure(evt));\n  }\n\n  /**\n   * Number of active uploads\n   */\n  get activeUploadsCount(): number {\n    return this.queue.filter(({ status }) => status === 'uploading' || status === 'retry').length;\n  }\n\n  /**\n   * Performs http requests\n   */\n  async request<T = string>(config: AjaxRequestConfig): Promise<AjaxResponse<T>> {\n    config.data ||= config.body;\n    return this.ajax.request(config);\n  }\n\n  private stateChange = (uploader: Uploader) => {\n    this.ngZone.run(() => this.eventsStream.next(pick(uploader, UPLOAD_STATE_KEYS)));\n    if (uploader.status !== 'uploading' && uploader.status !== 'added') {\n      this.ngZone.runOutsideAngular(() => setTimeout(() => this.processQueue()));\n    }\n  };\n\n  private async addUploaderInstance(file: File, options: UploadxFactoryOptions): Promise<void> {\n    const uploader = new options.uploaderClass(file, options, this.stateChange, this.ajax);\n    (uploader as { uploadId: string }).uploadId = await this.idService.generateId(uploader);\n    this.queue.push(uploader);\n    uploader.status = 'added';\n    if (options.autoUpload && onLine()) {\n      uploader.status = 'queue';\n    }\n  }\n\n  private processQueue(): void {\n    this.queue = this.queue.filter(({ status }) => status !== 'cancelled');\n    this.queue\n      .filter(({ status }) => status === 'queue')\n      .slice(0, Math.max(this.options.concurrency - this.activeUploadsCount, 0))\n      .forEach(uploader => uploader.upload());\n  }\n}\n","import { ElementRef, EventEmitter, HostListener, Input, Output, Renderer2 } from '@angular/core';\nimport { Directive, OnInit } from '@angular/core';\nimport { takeWhile } from 'rxjs/operators';\nimport { UploadState, UploadxControlEvent } from './interfaces';\nimport { UploadxOptions } from './options';\nimport { UploadxService } from './uploadx.service';\n\n@Directive({\n  selector: '[uploadx]',\n  standalone: true\n})\nexport class UploadxDirective implements OnInit {\n  @Input()\n  set uploadx(value: UploadxOptions | '') {\n    if (value) {\n      this.options = value;\n    }\n  }\n\n  @Input() options: UploadxOptions = {};\n\n  @Input() set control(value: UploadxControlEvent | '') {\n    if (value) {\n      this.uploadService.control(value);\n    }\n  }\n\n  @Output() state = new EventEmitter<UploadState>();\n\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    private uploadService: UploadxService\n  ) {}\n\n  ngOnInit(): void {\n    const { multiple, allowedTypes } = { ...this.uploadService.options, ...this.options };\n    multiple !== false && this.renderer.setAttribute(this.elementRef.nativeElement, 'multiple', '');\n    allowedTypes &&\n      this.renderer.setAttribute(this.elementRef.nativeElement, 'accept', allowedTypes);\n\n    this.uploadService.events\n      .pipe(takeWhile(() => this.state.observers.length > 0))\n      .subscribe(this.state);\n  }\n\n  @HostListener('change', ['$event.target.files'])\n  fileListener(files?: FileList | File[]): void {\n    if (files?.length) {\n      this.uploadService.handleFiles(files, this.options);\n    }\n  }\n}\n","import { ContentChild, Directive, HostBinding, HostListener } from '@angular/core';\nimport { UploadxDirective } from './uploadx.directive';\nimport { UploadxService } from './uploadx.service';\n\n@Directive({\n  selector: '[uploadxDrop]',\n  standalone: true\n})\nexport class UploadxDropDirective {\n  @HostBinding('class.uploadx-drop-active')\n  active = false;\n\n  @ContentChild(UploadxDirective, { static: false })\n  fileInput?: UploadxDirective;\n\n  constructor(private uploadService: UploadxService) {}\n\n  @HostListener('drop', ['$event'])\n  dropHandler(event: DragEvent): void {\n    this._stopEvents(event);\n    this.active = false;\n    const files = this.getFiles(event);\n    if (files.length) {\n      this.fileInput ? this.fileInput.fileListener(files) : this.uploadService.handleFiles(files);\n    }\n  }\n\n  @HostListener('dragover', ['$event'])\n  onDragOver(event: DragEvent): void {\n    this._stopEvents(event);\n    if (event.dataTransfer?.items[0]?.kind === 'file') {\n      if (this.fileInput?.options.multiple === false && event.dataTransfer.items.length > 1) {\n        event.dataTransfer.dropEffect = 'none';\n      } else {\n        event.dataTransfer.dropEffect = 'copy';\n        this.active = true;\n      }\n    }\n  }\n\n  @HostListener('dragleave', ['$event'])\n  onDragLeave(event: DragEvent): void {\n    this._stopEvents(event);\n    this.active = false;\n  }\n\n  /**\n   * Extracts the files from a `DragEvent` object\n   */\n  getFiles(event: DragEvent): FileList | File[] {\n    const dataTransfer = new DataTransfer();\n    const items = event.dataTransfer?.items;\n    if (items?.length) {\n      for (let i = 0; i < items.length; i++) {\n        const item = items[i];\n        if (item.kind === 'file' && !item.webkitGetAsEntry()?.isDirectory) {\n          const file = item.getAsFile();\n          file && dataTransfer.items.add(file);\n        }\n      }\n    }\n    return dataTransfer.files;\n  }\n\n  protected _stopEvents(event: DragEvent): void {\n    event.stopPropagation();\n    event.preventDefault();\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { UploadxOptions, UPLOADX_OPTIONS } from './options';\nimport { UploadxDropDirective } from './uploadx-drop.directive';\nimport { UploadxDirective } from './uploadx.directive';\n\n@NgModule({\n  imports: [UploadxDirective, UploadxDropDirective],\n  exports: [UploadxDirective, UploadxDropDirective]\n})\nexport class UploadxModule {\n  static withConfig(options: UploadxOptions): ModuleWithProviders<UploadxModule> {\n    return {\n      ngModule: UploadxModule,\n      providers: [{ provide: UPLOADX_OPTIONS, useValue: options }]\n    };\n  }\n}\n","import { Provider } from '@angular/core';\nimport { UPLOADX_OPTIONS, UploadxOptions } from './options';\n\n/**\n * Provides configuration options for standalone app.\n *\n * @example\n * ```ts\n * bootstrapApplication(AppComponent, {\n *   providers: [\n *     provideUploadx({\n *       endpoint: uploadUrl,\n *       allowedTypes: 'video/*,audio/*',\n *       maxChunkSize: 96 * 1024 * 1024\n *     })\n *   ]\n * });\n * ```\n */\nexport function provideUploadx(options: UploadxOptions = {}) {\n  const providers: Provider[] = [\n    {\n      provide: UPLOADX_OPTIONS,\n      useValue: options\n    }\n  ];\n  return providers;\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.UploadxService"],"mappings":"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"}