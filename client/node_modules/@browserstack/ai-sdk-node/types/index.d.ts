
export interface AISdkConfig {
    domain: string;
    platform: string;
}

export class AISDK {
    static configure(config: AISdkConfig): void;
}

export namespace BrowserstackHealing {
    type InitSuccessResponse = {
        isAuthenticated: true;
        userId: number;
        groupId: number;
        sessionToken: string;
        isGroupAIEnabled: boolean;
        isHealingEnabled: boolean;
        defaultLogDataEnabled: boolean;
    };

    type InitErrorResponse = {
        isAuthenticated: false;
        message?: string;
        status?: number;
    };

    function init(
        accessToken: string,
        userName: string,
        url: string,
        sdkVersion: string
    ): Promise<InitSuccessResponse | InitErrorResponse>;

    function setToken(
        sessionId: string,
        accessToken: string,
        url: string
    ): Promise<void>;

    function logData(
        locatorType: string,
        locatorValue: string,
        projectName?: string,
        testName?: string,
        groupId?: number,
        sessionId?: string,
        listOfCommands?: string,
        tcgEndpoint?: string,
        sessionToken?: string,
        referenceId?: string | null,
        rootId?: string | null,
        isGetShadowRoot?: boolean
    ): Promise<string>;

    function healFailure(
        locatorType: string,
        locatorValue: string,
        projectName?: string,
        testName?: string,
        userId?: number,
        groupId?: number,
        sessionId?: string,
        listOfCommands?: string,
        logs?: boolean,
        groupAIEnabled?: boolean,
        tcgEndpoint?: string,
        sessionToken?: string
    ): Promise<string>;

    function pollResult(
        url: string,
        sessionId: string,
        accessToken: string
    ): Promise<{ selector: string; value: string } | null>;

    function initializeCapabilities(
        capabilities: object
    ): object;

    function getFirefoxAddonPath(): string;
}

