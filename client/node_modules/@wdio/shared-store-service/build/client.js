import got from 'got';
let baseUrlResolve;
const baseUrlPromise = new Promise((resolve) => {
    baseUrlResolve = resolve;
});
let isBaseUrlReady = false;
export const setPort = (port) => {
    /**
     * if someone calls `setValue` in `onPrepare` we don't have a base url
     * set as the launcher is called after user hooks. In this case we need
     * to wait until it is set and flush all messages.
     */
    baseUrlResolve(`http://localhost:${port}`);
    isBaseUrlReady = true;
};
/**
 * make a request to the server to get a value from the store
 * @param   {string} key
 * @returns {*}
 */
export const getValue = async (key) => {
    if (!isBaseUrlReady) {
        throw new Error('Attempting to use `getValue` before the server has been initialized.');
    }
    const baseUrl = await baseUrlPromise;
    const res = await got.get(`${baseUrl}/${key}`, { responseType: 'json' }).catch(errHandler);
    return res?.body ? res.body.value : undefined;
};
/**
 * make a request to the server to set a value to the store
 * @param {string}  key
 * @param {*}       value `store[key]` value (plain object)
 */
export const setValue = async (key, value) => {
    const setPromise = baseUrlPromise.then((baseUrl) => {
        return got.post(`${baseUrl}/`, { json: { key, value } }).catch(errHandler);
    });
    return isBaseUrlReady ? setPromise : Promise.resolve();
};
/**
 *
 * @param {string}  key
 * @param {*}       value
 */
export const setResourcePool = async (key, value) => {
    const setPromise = baseUrlPromise.then((baseUrl) => {
        return got.post(`${baseUrl}/pool`, { json: { key, value } }).catch(errHandler);
    });
    return isBaseUrlReady ? setPromise : Promise.resolve();
};
/**
 *
 * @param {string}  key
 * @param {*}       value
 */
export const getValueFromPool = async (key, options) => {
    if (!isBaseUrlReady) {
        throw new Error('Attempting to use `getValueFromPool` before the server has been initialized.');
    }
    const baseUrl = await baseUrlPromise;
    const res = await got.get(`${baseUrl}/pool/${key}${typeof options?.timeout === 'number' ? `?timeout=${options.timeout}` : ''}`, { responseType: 'json' }).catch(errHandler);
    return res?.body ? res.body.value : undefined;
};
/**
 *
 * @param {string}  key
 * @param {*}       value
 */
export const addValueToPool = async (key, value) => {
    if (!isBaseUrlReady) {
        throw new Error('Attempting to use `addValueToPool` before the server has been initialized.');
    }
    const baseUrl = await baseUrlPromise;
    const res = await got.post(`${baseUrl}/pool/${key}`, { json: { value }, responseType: 'json' }).catch(errHandler);
    return res?.body ? res.body.value : undefined;
};
const errHandler = (err) => {
    throw new Error(`${err.response?.body || 'Shared store server threw an error'}`);
};
