import logger from '@wdio/logger';
import { setPort } from './client.js';
import { CUSTOM_CAP } from './constants.js';
const log = logger('@wdio/shared-store-service');
let server;
export default class SharedStoreLauncher {
    _app;
    async onPrepare(_, capabilities) {
        /**
         * import during runtime to avoid unnecessary dependency loading
         */
        server = (await import('./server.js'));
        const { port, app } = await server.startServer();
        this._app = app;
        setPort(port);
        const capsList = Array.isArray(capabilities)
            ? capabilities
            : Object.values(capabilities).map((multiremoteOption) => multiremoteOption.capabilities);
        const caps = capsList.flatMap((c) => {
            const multiremote = c;
            if (!multiremote.browserName && multiremote[Object.keys(multiremote)[0]].capabilities) {
                return Object.values(multiremote).map((options) => options.capabilities?.alwaysMatch ||
                    options.capabilities);
            }
            const w3cCaps = c;
            return w3cCaps.alwaysMatch || c;
        });
        caps.forEach((c) => { c[CUSTOM_CAP] = port; });
        log.info(`Started shared server on port ${port}`);
    }
    async onComplete() {
        return new Promise((resolve) => {
            if (this._app && this._app.server.close) {
                this._app.server.close(() => resolve());
            }
            return resolve();
        });
    }
}
