import { getValue, setValue, setPort, setResourcePool, getValueFromPool, addValueToPool } from './client.js';
import { CUSTOM_CAP } from './constants.js';
export default class SharedStoreService {
    _browser;
    constructor(_, caps) {
        const port = (caps[CUSTOM_CAP] ||
            caps.alwaysMatch?.[CUSTOM_CAP] ||
            (Object.values(caps)[0]?.capabilities)[CUSTOM_CAP]);
        if (!port) {
            throw new Error('SharedStoreService: port not found in capabilities');
        }
        setPort(port);
    }
    before(caps, specs, _browser) {
        this._browser = _browser;
        const sharedStore = Object.create({}, {
            get: {
                value: (key) => getValue(key)
            },
            set: {
                value: (key, value) => setValue(key, value)
            },
            setResourcePool: {
                value: (key, value) => setResourcePool(key, value)
            },
            getValueFromPool: {
                value: (key, options) => getValueFromPool(key, options)
            },
            addValueToPool: {
                value: (key, value) => addValueToPool(key, value)
            }
        });
        this._browser.sharedStore = sharedStore;
        const browser = this._browser;
        if (!this._browser.capabilities && browser.instances) {
            browser.instances.forEach((browserName) => {
                browser.getInstance(browserName).sharedStore = sharedStore;
            });
        }
    }
}
