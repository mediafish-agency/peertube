export declare const clientFilterHookObject: {
    'filter:api.trending-videos.videos.list.params': boolean;
    'filter:api.trending-videos.videos.list.result': boolean;
    'filter:api.most-liked-videos.videos.list.params': boolean;
    'filter:api.most-liked-videos.videos.list.result': boolean;
    'filter:api.local-videos.videos.list.params': boolean;
    'filter:api.local-videos.videos.list.result': boolean;
    'filter:api.recently-added-videos.videos.list.params': boolean;
    'filter:api.recently-added-videos.videos.list.result': boolean;
    'filter:api.user-subscriptions-videos.videos.list.params': boolean;
    'filter:api.user-subscriptions-videos.videos.list.result': boolean;
    'filter:api.video-watch.video.get.params': boolean;
    'filter:api.video-watch.video.get.result': boolean;
    'filter:api.video-watch.video-playlist-elements.get.params': boolean;
    'filter:api.video-watch.video-playlist-elements.get.result': boolean;
    'filter:api.video-watch.video-threads.list.params': boolean;
    'filter:api.video-watch.video-threads.list.result': boolean;
    'filter:api.video-watch.video-thread-replies.list.params': boolean;
    'filter:api.video-watch.video-thread-replies.list.result': boolean;
    'filter:api.search.videos.list.params': boolean;
    'filter:api.search.videos.list.result': boolean;
    'filter:api.search.video-channels.list.params': boolean;
    'filter:api.search.video-channels.list.result': boolean;
    'filter:api.search.video-playlists.list.params': boolean;
    'filter:api.search.video-playlists.list.result': boolean;
    'filter:api.signup.registration.create.params': boolean;
    'filter:api.my-library.video-playlist-elements.list.params': boolean;
    'filter:api.my-library.video-playlist-elements.list.result': boolean;
    'filter:internal.video-watch.player.build-options.params': boolean;
    'filter:internal.video-watch.player.build-options.result': boolean;
    'filter:internal.video-watch.player.load-options.params': boolean;
    'filter:internal.video-watch.player.load-options.result': boolean;
    'filter:internal.common.svg-icons.get-content.params': boolean;
    'filter:internal.common.svg-icons.get-content.result': boolean;
    'filter:left-menu.links.create.result': boolean;
    'filter:upload.messages.create.result': boolean;
    'filter:login.instance-about-plugin-panels.create.result': boolean;
    'filter:signup.instance-about-plugin-panels.create.result': boolean;
    'filter:share.video-embed-code.build.params': boolean;
    'filter:share.video-embed-code.build.result': boolean;
    'filter:share.video-playlist-embed-code.build.params': boolean;
    'filter:share.video-playlist-embed-code.build.result': boolean;
    'filter:share.video-embed-url.build.params': boolean;
    'filter:share.video-embed-url.build.result': boolean;
    'filter:share.video-playlist-embed-url.build.params': boolean;
    'filter:share.video-playlist-embed-url.build.result': boolean;
    'filter:share.video-url.build.params': boolean;
    'filter:share.video-url.build.result': boolean;
    'filter:share.video-playlist-url.build.params': boolean;
    'filter:share.video-playlist-url.build.result': boolean;
    'filter:video-watch.video-plugin-metadata.result': boolean;
    'filter:internal.player.videojs.options.result': boolean;
    'filter:internal.player.p2p-media-loader.options.result': boolean;
};
export type ClientFilterHookName = keyof typeof clientFilterHookObject;
export declare const clientActionHookObject: {
    'action:application.init': boolean;
    'action:video-watch.init': boolean;
    'action:video-watch.video.loaded': boolean;
    'action:video-watch.player.loaded': boolean;
    'action:video-watch.video-threads.loaded': boolean;
    'action:video-watch.video-thread-replies.loaded': boolean;
    'action:video-channel-create.init': boolean;
    'action:video-channel-update.init': boolean;
    'action:video-channel-update.video-channel.loaded': boolean;
    'action:video-channel-videos.init': boolean;
    'action:video-channel-videos.video-channel.loaded': boolean;
    'action:video-channel-videos.videos.loaded': boolean;
    'action:video-channel-playlists.init': boolean;
    'action:video-channel-playlists.video-channel.loaded': boolean;
    'action:video-channel-playlists.playlists.loaded': boolean;
    'action:video-edit.init': boolean;
    'action:video-edit.form.updated': boolean;
    'action:login.init': boolean;
    'action:search.init': boolean;
    'action:router.navigation-end': boolean;
    'action:signup.register.init': boolean;
    'action:admin-plugin-settings.init': boolean;
    'action:video-upload.init': boolean;
    'action:video-url-import.init': boolean;
    'action:video-torrent-import.init': boolean;
    'action:go-live.init': boolean;
    'action:auth-user.logged-in': boolean;
    'action:auth-user.logged-out': boolean;
    'action:auth-user.information-loaded': boolean;
    'action:modal.video-download.shown': boolean;
    'action:modal.share.shown': boolean;
    'action:embed.player.loaded': boolean;
};
export type ClientActionHookName = keyof typeof clientActionHookObject;
export declare const clientHookObject: {
    'filter:api.trending-videos.videos.list.params': boolean;
    'filter:api.trending-videos.videos.list.result': boolean;
    'filter:api.most-liked-videos.videos.list.params': boolean;
    'filter:api.most-liked-videos.videos.list.result': boolean;
    'filter:api.local-videos.videos.list.params': boolean;
    'filter:api.local-videos.videos.list.result': boolean;
    'filter:api.recently-added-videos.videos.list.params': boolean;
    'filter:api.recently-added-videos.videos.list.result': boolean;
    'filter:api.user-subscriptions-videos.videos.list.params': boolean;
    'filter:api.user-subscriptions-videos.videos.list.result': boolean;
    'filter:api.video-watch.video.get.params': boolean;
    'filter:api.video-watch.video.get.result': boolean;
    'filter:api.video-watch.video-playlist-elements.get.params': boolean;
    'filter:api.video-watch.video-playlist-elements.get.result': boolean;
    'filter:api.video-watch.video-threads.list.params': boolean;
    'filter:api.video-watch.video-threads.list.result': boolean;
    'filter:api.video-watch.video-thread-replies.list.params': boolean;
    'filter:api.video-watch.video-thread-replies.list.result': boolean;
    'filter:api.search.videos.list.params': boolean;
    'filter:api.search.videos.list.result': boolean;
    'filter:api.search.video-channels.list.params': boolean;
    'filter:api.search.video-channels.list.result': boolean;
    'filter:api.search.video-playlists.list.params': boolean;
    'filter:api.search.video-playlists.list.result': boolean;
    'filter:api.signup.registration.create.params': boolean;
    'filter:api.my-library.video-playlist-elements.list.params': boolean;
    'filter:api.my-library.video-playlist-elements.list.result': boolean;
    'filter:internal.video-watch.player.build-options.params': boolean;
    'filter:internal.video-watch.player.build-options.result': boolean;
    'filter:internal.video-watch.player.load-options.params': boolean;
    'filter:internal.video-watch.player.load-options.result': boolean;
    'filter:internal.common.svg-icons.get-content.params': boolean;
    'filter:internal.common.svg-icons.get-content.result': boolean;
    'filter:left-menu.links.create.result': boolean;
    'filter:upload.messages.create.result': boolean;
    'filter:login.instance-about-plugin-panels.create.result': boolean;
    'filter:signup.instance-about-plugin-panels.create.result': boolean;
    'filter:share.video-embed-code.build.params': boolean;
    'filter:share.video-embed-code.build.result': boolean;
    'filter:share.video-playlist-embed-code.build.params': boolean;
    'filter:share.video-playlist-embed-code.build.result': boolean;
    'filter:share.video-embed-url.build.params': boolean;
    'filter:share.video-embed-url.build.result': boolean;
    'filter:share.video-playlist-embed-url.build.params': boolean;
    'filter:share.video-playlist-embed-url.build.result': boolean;
    'filter:share.video-url.build.params': boolean;
    'filter:share.video-url.build.result': boolean;
    'filter:share.video-playlist-url.build.params': boolean;
    'filter:share.video-playlist-url.build.result': boolean;
    'filter:video-watch.video-plugin-metadata.result': boolean;
    'filter:internal.player.videojs.options.result': boolean;
    'filter:internal.player.p2p-media-loader.options.result': boolean;
} & {
    'action:application.init': boolean;
    'action:video-watch.init': boolean;
    'action:video-watch.video.loaded': boolean;
    'action:video-watch.player.loaded': boolean;
    'action:video-watch.video-threads.loaded': boolean;
    'action:video-watch.video-thread-replies.loaded': boolean;
    'action:video-channel-create.init': boolean;
    'action:video-channel-update.init': boolean;
    'action:video-channel-update.video-channel.loaded': boolean;
    'action:video-channel-videos.init': boolean;
    'action:video-channel-videos.video-channel.loaded': boolean;
    'action:video-channel-videos.videos.loaded': boolean;
    'action:video-channel-playlists.init': boolean;
    'action:video-channel-playlists.video-channel.loaded': boolean;
    'action:video-channel-playlists.playlists.loaded': boolean;
    'action:video-edit.init': boolean;
    'action:video-edit.form.updated': boolean;
    'action:login.init': boolean;
    'action:search.init': boolean;
    'action:router.navigation-end': boolean;
    'action:signup.register.init': boolean;
    'action:admin-plugin-settings.init': boolean;
    'action:video-upload.init': boolean;
    'action:video-url-import.init': boolean;
    'action:video-torrent-import.init': boolean;
    'action:go-live.init': boolean;
    'action:auth-user.logged-in': boolean;
    'action:auth-user.logged-out': boolean;
    'action:auth-user.information-loaded': boolean;
    'action:modal.video-download.shown': boolean;
    'action:modal.share.shown': boolean;
    'action:embed.player.loaded': boolean;
};
export type ClientHookName = keyof typeof clientHookObject;
export interface ClientHook {
    runHook<T>(hookName: ClientHookName, result?: T, params?: any): Promise<T>;
}
//# sourceMappingURL=client-hook.model.d.ts.map