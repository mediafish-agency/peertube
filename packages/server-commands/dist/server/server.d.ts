import { Video, VideoChannel, VideoChannelSync, VideoCreateResult, VideoDetails } from '@peertube/peertube-models';
import { ChildProcess } from 'child_process';
import { BulkCommand } from '../bulk/index.js';
import { CLICommand } from '../cli/index.js';
import { CustomPagesCommand } from '../custom-pages/index.js';
import { FeedCommand } from '../feeds/index.js';
import { LogsCommand } from '../logs/index.js';
import { AbusesCommand, AutomaticTagsCommand, WatchedWordsCommand } from '../moderation/index.js';
import { OverviewsCommand } from '../overviews/index.js';
import { RunnerJobsCommand, RunnerRegistrationTokensCommand, RunnersCommand } from '../runners/index.js';
import { SearchCommand } from '../search/index.js';
import { SocketIOCommand } from '../socket/index.js';
import { AccountsCommand, BlocklistCommand, LoginCommand, NotificationsCommand, RegistrationsCommand, SubscriptionsCommand, TwoFactorCommand, UserExportsCommand, UserImportsCommand, UsersCommand } from '../users/index.js';
import { BlacklistCommand, CaptionsCommand, ChangeOwnershipCommand, ChannelSyncsCommand, ChannelsCommand, ChaptersCommand, CommentsCommand, HistoryCommand, LiveCommand, PlaylistsCommand, ServicesCommand, StoryboardCommand, StreamingPlaylistsCommand, VideoImportsCommand, VideoPasswordsCommand, VideoStatsCommand, VideoStudioCommand, VideoTokenCommand, VideosCommand, ViewsCommand } from '../videos/index.js';
import { ConfigCommand } from './config-command.js';
import { ContactFormCommand } from './contact-form-command.js';
import { DebugCommand } from './debug-command.js';
import { FollowsCommand } from './follows-command.js';
import { JobsCommand } from './jobs-command.js';
import { MetricsCommand } from './metrics-command.js';
import { PluginsCommand } from './plugins-command.js';
import { RedundancyCommand } from './redundancy-command.js';
import { ServersCommand } from './servers-command.js';
import { StatsCommand } from './stats-command.js';
export type RunServerOptions = {
    autoEnableImportProxy?: boolean;
    hideLogs?: boolean;
    nodeArgs?: string[];
    peertubeArgs?: string[];
    env?: {
        [id: string]: string;
    };
};
export declare class PeerTubeServer {
    app?: ChildProcess;
    url: string;
    host?: string;
    hostname?: string;
    port?: number;
    rtmpPort?: number;
    rtmpsPort?: number;
    parallel?: boolean;
    internalServerNumber: number;
    serverNumber?: number;
    customConfigFile?: string;
    store?: {
        client?: {
            id?: string;
            secret?: string;
        };
        user?: {
            username: string;
            password: string;
        };
        channel?: VideoChannel;
        videoChannelSync?: Partial<VideoChannelSync>;
        video?: Video;
        videoCreated?: VideoCreateResult;
        videoDetails?: VideoDetails;
        videos?: {
            id: number;
            uuid: string;
        }[];
    };
    accessToken?: string;
    refreshToken?: string;
    bulk?: BulkCommand;
    cli?: CLICommand;
    customPage?: CustomPagesCommand;
    feed?: FeedCommand;
    logs?: LogsCommand;
    abuses?: AbusesCommand;
    overviews?: OverviewsCommand;
    search?: SearchCommand;
    contactForm?: ContactFormCommand;
    debug?: DebugCommand;
    follows?: FollowsCommand;
    jobs?: JobsCommand;
    metrics?: MetricsCommand;
    plugins?: PluginsCommand;
    redundancy?: RedundancyCommand;
    stats?: StatsCommand;
    config?: ConfigCommand;
    socketIO?: SocketIOCommand;
    accounts?: AccountsCommand;
    blocklist?: BlocklistCommand;
    subscriptions?: SubscriptionsCommand;
    live?: LiveCommand;
    services?: ServicesCommand;
    blacklist?: BlacklistCommand;
    captions?: CaptionsCommand;
    changeOwnership?: ChangeOwnershipCommand;
    playlists?: PlaylistsCommand;
    history?: HistoryCommand;
    videoImports?: VideoImportsCommand;
    channelSyncs?: ChannelSyncsCommand;
    streamingPlaylists?: StreamingPlaylistsCommand;
    channels?: ChannelsCommand;
    comments?: CommentsCommand;
    notifications?: NotificationsCommand;
    servers?: ServersCommand;
    login?: LoginCommand;
    users?: UsersCommand;
    videoStudio?: VideoStudioCommand;
    videos?: VideosCommand;
    videoStats?: VideoStatsCommand;
    views?: ViewsCommand;
    twoFactor?: TwoFactorCommand;
    videoToken?: VideoTokenCommand;
    registrations?: RegistrationsCommand;
    videoPasswords?: VideoPasswordsCommand;
    storyboard?: StoryboardCommand;
    chapters?: ChaptersCommand;
    userImports?: UserImportsCommand;
    userExports?: UserExportsCommand;
    runners?: RunnersCommand;
    runnerRegistrationTokens?: RunnerRegistrationTokensCommand;
    runnerJobs?: RunnerJobsCommand;
    watchedWordsLists?: WatchedWordsCommand;
    autoTags?: AutomaticTagsCommand;
    constructor(options: {
        serverNumber: number;
    } | {
        url: string;
    });
    setServerNumber(serverNumber: number): void;
    setUrl(url: string): void;
    getDirectoryPath(directoryName: string): string;
    flushAndRun(configOverride?: object, options?: RunServerOptions): Promise<void>;
    run(configOverrideArg?: any, options?: RunServerOptions): Promise<void>;
    kill(): Promise<void>;
    private randomServer;
    private randomRTMP;
    private assignCustomConfigFile;
    private buildConfigOverride;
    private assignCommands;
}
//# sourceMappingURL=server.d.ts.map