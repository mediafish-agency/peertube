{"version":3,"file":"sequelize.spec.js","sourceRoot":"","sources":["../../test/sequelize.spec.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iBAAe;AACf,oDAA4B;AAC5B,gCAAkD;AAClD,wCAAqD;AAErD,4CAAoG;AACpG,8EAU6C;AAC7C,0EAAiG;AAEjG,kEAAkE;AAClE,MAAM,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AAEpC,MAAM,eAAe,GAAG,IAAA,mDAA8B,EAAC,IAAI,8BAAwB,EAAE,CAAC,CAAC;AACvF,qDAAuC;AAEvC,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;IACvC,MAAM,iBAAiB,GAAG,GAAmB,EAAE;QAC3C,OAAO,IAAA,iCAAY,GAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,sBAAsB,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAmB,CAAC;IAC/G,CAAC,CAAC;IAEF,UAAU,CAAC,GAAG,EAAE;QACZ,eAAe,CAAC,MAAM,EAAE,CAAC;IAC7B,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACX,eAAe,CAAC,OAAO,EAAE,CAAC;IAC9B,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;QACtB,MAAM,SAAS,GAAG,UAAU,CAAC;QAC7B,MAAM,OAAO,GAAG,WAAW,CAAC;QAC5B,MAAM,aAAa,GAAG,WAAW,CAAC;QAClC,MAAM,aAAa,GAAG,KAAK,CAAC;QAC5B,MAAM,OAAO,GAAG,OAAO,CAAC;QAExB,MAAM,QAAQ,GAAG,IAAI,SAAS,CAAC,SAAS,CACpC,GAAG,SAAS,MAAM,OAAO,IAAI,aAAa,IAAI,aAAa,IAAI,OAAO,EAAE,EACxE,EAAE,OAAO,EAAE,KAAK,EAAE,CACrB,CAAC;QACF,MAAM,IAAK,SAAQ,SAAS,CAAC,KAAK;SAEjC;QAED,IAAI,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,EAAE,IAAI,EAAE,SAAS,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,CAAC,CAAC;QAExF,EAAE,CAAC,wBAAwB,EAAE,KAAK,IAAI,EAAE;YACpC,IAAI,CAAC;gBACD,MAAM,IAAI,CAAC,MAAM,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;YAC5C,CAAC;YAAC,WAAM,CAAC;gBACL,oCAAoC;YACxC,CAAC;YACD,MAAM,KAAK,GAAG,iBAAiB,EAAE,CAAC;YAClC,IAAA,gBAAM,EAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC7B,IAAA,gBAAM,EAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,oBAAc,CAAC,KAAK,CAAC,CAAC;YACxD,MAAM,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;YAEvC,IAAA,gBAAM,EAAC,UAAU,CAAC,yCAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACvD,IAAA,gBAAM,EAAC,UAAU,CAAC,uCAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACnD,IAAA,gBAAM,EAAC,UAAU,CAAC,6CAAsB,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YAC/D,IAAA,gBAAM,EAAC,UAAU,CAAC,6CAAsB,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YAC/D,IAAA,gBAAM,EAAC,UAAU,CAAC,uCAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACnD,IAAA,gBAAM,EAAC,UAAU,CAAC,4CAAqB,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACzD,IAAA,gBAAM,EAAC,UAAU,CAAC,4CAAqB,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACxD,IAAA,gBAAM,EAAC,UAAU,CAAC,4CAAqB,CAAC,CAAC,CAAC,IAAI,CAC1C,uGAAuG,CAC1G,CAAC;QACN,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;YACrC,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;YACrC,MAAM,KAAK,GAAG,iBAAiB,EAAE,CAAC;YAClC,IAAA,gBAAM,EAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;YAEvC,IAAA,gBAAM,EAAC,UAAU,CAAC,4CAAqB,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACzD,IAAA,gBAAM,EAAC,UAAU,CAAC,4CAAqB,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACxD,IAAA,gBAAM,EAAC,UAAU,CAAC,4CAAqB,CAAC,CAAC,CAAC,IAAI,CAC1C,4EAA4E,CAC/E,CAAC;QACN,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;YACrC,MAAM,IAAI,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;YAClE,MAAM,KAAK,GAAG,iBAAiB,EAAE,CAAC;YAClC,IAAA,gBAAM,EAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;YAEvC,IAAA,gBAAM,EAAC,UAAU,CAAC,4CAAqB,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAC7D,IAAA,gBAAM,EAAC,UAAU,CAAC,4CAAqB,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACxD,IAAA,gBAAM,EAAC,UAAU,CAAC,4CAAqB,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACvE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uBAAuB,EAAE,KAAK,IAAI,EAAE;YACnC,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;YACnC,MAAM,KAAK,GAAG,iBAAiB,EAAE,CAAC;YAClC,IAAA,gBAAM,EAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;YAEvC,IAAA,gBAAM,EAAC,UAAU,CAAC,4CAAqB,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACzD,IAAA,gBAAM,EAAC,UAAU,CAAC,4CAAqB,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACxD,IAAA,gBAAM,EAAC,UAAU,CAAC,4CAAqB,CAAC,CAAC,CAAC,IAAI,CAAC,oDAAoD,CAAC,CAAC;QACzG,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uBAAuB,EAAE,KAAK,IAAI,EAAE;YACnC,MAAM,EAAE,GAAG,SAAS,CAAC,EAAE,CAAC;YACxB,MAAM,IAAI,CAAC,OAAO,CAAC;gBACf,KAAK,EAAE;oBACH,QAAQ,EAAE,QAAQ;oBAClB,IAAI,EAAE;wBACF,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;4BACL,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI;4BACb,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI;yBAChB;qBACJ;iBACJ;gBACD,UAAU,EAAE,CAAC,IAAI,EAAE,UAAU,CAAC;gBAC9B,KAAK,EAAE,CAAC,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;gBAC7B,KAAK,EAAE,EAAE;gBACT,MAAM,EAAE,CAAC;aACZ,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;YAEnB,MAAM,KAAK,GAAG,iBAAiB,EAAE,CAAC;YAClC,IAAA,gBAAM,EAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;YAEvC,IAAA,gBAAM,EAAC,UAAU,CAAC,4CAAqB,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACzD,IAAA,gBAAM,EAAC,UAAU,CAAC,4CAAqB,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACxD,IAAA,gBAAM,EAAC,UAAU,CAAC,4CAAqB,CAAC,CAAC,CAAC,IAAI,CAC1C,0LAA0L,CAC7L,CAAC;QACN,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;YACnD,MAAM,MAAO,SAAQ,SAAS,CAAC,KAAK;aAAG;YACvC,MAAM,iBAAiB,GAAG,cAAc,CAAC;YACzC,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,iBAAiB,EAAE,CAAC,CAAC;YAEvE,MAAM,MAAM,CAAC,OAAO,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;YACvC,MAAM,KAAK,GAAG,iBAAiB,EAAE,CAAC;YAClC,IAAA,gBAAM,EAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;YACvC,IAAA,gBAAM,EAAC,UAAU,CAAC,4CAAqB,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sBAAsB,EAAE,KAAK,IAAI,EAAE;YAClC,MAAM,GAAI,SAAQ,SAAS,CAAC,KAAK;aAEhC;YAED,GAAG,CAAC,IAAI,CACJ,EAAE,SAAS,EAAE,EAAE,IAAI,EAAE,SAAS,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,SAAS,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,EAChG,EAAE,SAAS,EAAE,QAAQ,EAAE,CAC1B,CAAC;YACF,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE,EAAE,UAAU,EAAE,WAAW,EAAE,CAAC,CAAC;YACjD,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,UAAU,EAAE,WAAW,EAAE,CAAC,CAAC;YAE/C,MAAM,GAAG,CAAC,OAAO,CAAC;gBACd,UAAU,EAAE,CAAC,WAAW,EAAE,OAAO,CAAC;gBAClC,OAAO,EAAE;oBACL;wBACI,KAAK,EAAE,IAAI;wBACX,UAAU,EAAE,CAAC,WAAW,CAAC;wBACzB,QAAQ,EAAE,IAAI;qBACjB;iBACJ;aACJ,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;YAEnB,MAAM,KAAK,GAAG,iBAAiB,EAAE,CAAC;YAClC,IAAA,gBAAM,EAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;YAEvC,IAAA,gBAAM,EAAC,UAAU,CAAC,4CAAqB,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACzD,IAAA,gBAAM,EAAC,UAAU,CAAC,4CAAqB,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAC7D,IAAA,gBAAM,EAAC,UAAU,CAAC,4CAAqB,CAAC,CAAC,CAAC,IAAI,CAC1C,qNAAqN,CACxN,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE;QACnB,MAAM,SAAS,GAAG,OAAO,CAAC;QAC1B,MAAM,OAAO,GAAG,aAAa,CAAC;QAC9B,MAAM,aAAa,GAAG,WAAW,CAAC;QAClC,MAAM,aAAa,GAAG,KAAK,CAAC;QAC5B,MAAM,OAAO,GAAG,UAAU,CAAC;QAE3B,MAAM,QAAQ,GAAG,IAAI,SAAS,CAAC,SAAS,CAAC,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE;YACnE,IAAI,EAAE,aAAa;YACnB,IAAI,EAAE,aAAa;YACnB,OAAO,EAAE,SAAS;SACrB,CAAC,CAAC;QAEH,QAAQ,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,SAAS,EAAE,EAAE,IAAI,EAAE,SAAS,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QAE7E,EAAE,CAAC,wBAAwB,EAAE,KAAK,IAAI,EAAE;YACpC,MAAM,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;YACxE,MAAM,KAAK,GAAG,iBAAiB,EAAE,CAAC;YAClC,IAAA,gBAAM,EAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC7B,IAAA,gBAAM,EAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,oBAAc,CAAC,KAAK,CAAC,CAAC;YACxD,MAAM,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;YAEvC,IAAA,gBAAM,EAAC,UAAU,CAAC,yCAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACvD,IAAA,gBAAM,EAAC,UAAU,CAAC,uCAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACnD,IAAA,gBAAM,EAAC,UAAU,CAAC,6CAAsB,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YAC/D,IAAA,gBAAM,EAAC,UAAU,CAAC,6CAAsB,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YAC/D,IAAA,gBAAM,EAAC,UAAU,CAAC,uCAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACnD,IAAA,gBAAM,EAAC,UAAU,CAAC,4CAAqB,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACzD,IAAA,gBAAM,EAAC,UAAU,CAAC,4CAAqB,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACxD,IAAA,gBAAM,EAAC,UAAU,CAAC,4CAAqB,CAAC,CAAC,CAAC,IAAI,CAC1C,2FAA2F,CAC9F,CAAC;QACN,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;YACrC,MAAM,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;YACrD,MAAM,KAAK,GAAG,iBAAiB,EAAE,CAAC;YAClC,IAAA,gBAAM,EAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;YAEvC,IAAA,gBAAM,EAAC,UAAU,CAAC,4CAAqB,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACzD,IAAA,gBAAM,EAAC,UAAU,CAAC,4CAAqB,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACxD,IAAA,gBAAM,EAAC,UAAU,CAAC,4CAAqB,CAAC,CAAC,CAAC,IAAI,CAC1C,4EAA4E,CAC/E,CAAC;QACN,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;YACnC,EAAE,CAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;gBACxC,IAAI,CAAC;oBACD,MAAM,QAAQ,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;gBACzC,CAAC;gBAAC,WAAM,CAAC;oBACL,8BAA8B;gBAClC,CAAC;gBACD,MAAM,KAAK,GAAG,iBAAiB,EAAE,CAAC;gBAClC,IAAA,gBAAM,EAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC7B,MAAM,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;gBAEvC,IAAA,gBAAM,EAAC,UAAU,CAAC,4CAAqB,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACzD,IAAA,gBAAM,EAAC,UAAU,CAAC,4CAAqB,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YACnE,CAAC,CAAC,CAAC;YACH,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;gBAChD,IAAI,CAAC;oBACD,MAAM,QAAQ,CAAC,KAAK,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;gBAC7C,CAAC;gBAAC,WAAM,CAAC;oBACL,8BAA8B;gBAClC,CAAC;gBACD,MAAM,KAAK,GAAG,iBAAiB,EAAE,CAAC;gBAClC,IAAA,gBAAM,EAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC7B,MAAM,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;gBAEvC,IAAA,gBAAM,EAAC,UAAU,CAAC,4CAAqB,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACzD,IAAA,gBAAM,EAAC,UAAU,CAAC,4CAAqB,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YACnE,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;gBAC5C,IAAI,CAAC;oBACD,MAAM,QAAQ,CAAC,KAAK,CAAC,cAAc,EAAE,EAAE,IAAI,EAAE,SAAS,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,CAAC;gBAC7E,CAAC;gBAAC,WAAM,CAAC;oBACL,8BAA8B;gBAClC,CAAC;gBACD,MAAM,KAAK,GAAG,iBAAiB,EAAE,CAAC;gBAClC,IAAA,gBAAM,EAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC7B,MAAM,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;gBAEvC,IAAA,gBAAM,EAAC,UAAU,CAAC,4CAAqB,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACtD,IAAA,gBAAM,EAAC,UAAU,CAAC,4CAAqB,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YACnE,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACpB,MAAM,QAAQ,GAAG,IAAI,SAAS,CAAC,SAAS,CAAC,eAAe,EAAE;YACtD,OAAO,EAAE,KAAK;SACjB,CAAC,CAAC;QACH,QAAQ,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,SAAS,EAAE,EAAE,IAAI,EAAE,SAAS,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QAE7E,EAAE,CAAC,wBAAwB,EAAE,KAAK,IAAI,EAAE;YACpC,MAAM,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;YACxE,MAAM,KAAK,GAAG,iBAAiB,EAAE,CAAC;YAClC,IAAA,gBAAM,EAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;YACvC,IAAA,gBAAM,EAAC,UAAU,CAAC,yCAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,IAAA,gBAAM,EAAC,UAAU,CAAC,6CAAsB,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC1D,IAAA,gBAAM,EAAC,UAAU,CAAC,4CAAqB,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACzD,IAAA,gBAAM,EAAC,UAAU,CAAC,4CAAqB,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACxD,IAAA,gBAAM,EAAC,UAAU,CAAC,4CAAqB,CAAC,CAAC,CAAC,IAAI,CAC1C,wFAAwF,CAC3F,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACpB,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;YACvB,EAAE,CAAC,uBAAuB,EAAE,KAAK,IAAI,EAAE;gBACnC,eAAe,CAAC,OAAO,EAAE,CAAC;gBAC1B,MAAM,QAAQ,GAAG,IAAI,SAAS,CAAC,SAAS,CAAC,yCAAyC,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;gBACxG,QAAQ,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,SAAS,EAAE,EAAE,IAAI,EAAE,SAAS,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;gBAE7E,MAAM,QAAQ,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;gBACjC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,GAAG,GAAG,EAAE;oBACvC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACvD,CAAC,CAAC;gBACF,eAAe,CAAC,SAAS,CAAC;oBACtB,SAAS,EAAE,CAAC,IAAU,EAAE,EAAE,GAAG,EAAE,MAAM,EAA6B,EAAE,EAAE;wBAClE,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;wBACrC,IAAI,CAAC,YAAY,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;oBAC5C,CAAC;iBACJ,CAAC,CAAC;gBACH,eAAe,CAAC,MAAM,EAAE,CAAC;gBAEzB,MAAM,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;gBACrC,MAAM,KAAK,GAAG,iBAAiB,EAAE,CAAC;gBAClC,MAAM,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;gBAEvC,IAAA,gBAAM,EAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC3C,IAAA,gBAAM,EAAC,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAClD,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;gBAC1D,eAAe,CAAC,OAAO,EAAE,CAAC;gBAC1B,MAAM,QAAQ,GAAG,IAAI,SAAS,CAAC,SAAS,CAAC,yCAAyC,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;gBACxG,QAAQ,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,SAAS,EAAE,EAAE,IAAI,EAAE,SAAS,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;gBAE7E,MAAM,QAAQ,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;gBACjC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,GAAG,GAAG,EAAE;oBACvC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACvD,CAAC,CAAC;gBACF,MAAM,YAAY,GAAG,CAAC,GAAG,EAAE;oBACvB,IAAI,OAAe,CAAC;oBACpB,IAAI,KAAY,CAAC;oBACjB,OAAO;wBACH,KAAK,EAAE,CAAC,QAAgB,EAAE,IAAW,EAAE,EAAE;4BACrC,OAAO,GAAG,QAAQ,CAAC;4BACnB,KAAK,GAAG,IAAI,CAAC;wBACjB,CAAC;wBACD,KAAK,EAAE,GAAG,EAAE,GAAE,CAAC;wBACf,UAAU,EAAE,GAAG,EAAE,CAAC,OAAO;wBACzB,QAAQ,EAAE,GAAG,EAAE,CAAC,KAAK;qBACxB,CAAC;gBACN,CAAC,CAAC,EAAE,CAAC;gBAEL,eAAe,CAAC,SAAS,CAAC;oBACtB,SAAS,EAAE,GAAG,EAAE;wBACZ,MAAM,IAAI,KAAK,CAAC,UAAU,CAAC,CAAC;oBAChC,CAAC;iBACJ,CAAC,CAAC;gBACH,eAAe,CAAC,MAAM,EAAE,CAAC;gBACzB,UAAI,CAAC,SAAS,CAAC,YAAmB,CAAC,CAAC;gBACpC,MAAM,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;gBACrC,MAAM,KAAK,GAAG,iBAAiB,EAAE,CAAC;gBAClC,IAAA,gBAAM,EAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC7B,IAAA,gBAAM,EAAC,YAAY,CAAC,UAAU,EAAE,CAAC,CAAC,IAAI,CAAC,4CAA4C,CAAC,CAAC;gBACrF,IAAA,gBAAM,EAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBACzD,UAAI,CAAC,SAAS,CAAC,IAAI,uBAAiB,EAAE,CAAC,CAAC;YAC5C,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;YAC1B,EAAE,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE;gBACtC,eAAe,CAAC,OAAO,EAAE,CAAC;gBAC1B,MAAM,QAAQ,GAAG,IAAI,SAAS,CAAC,SAAS,CAAC,yCAAyC,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;gBACxG,QAAQ,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,SAAS,EAAE,EAAE,IAAI,EAAE,SAAS,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;gBAE7E,MAAM,QAAQ,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;gBACjC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,GAAG,GAAG,EAAE;oBACvC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACvD,CAAC,CAAC;gBACF,eAAe,CAAC,SAAS,CAAC;oBACtB,YAAY,EAAE,CAAC,IAAU,EAAE,QAAa,EAAE,EAAE;wBACxC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACxD,CAAC;iBACJ,CAAC,CAAC;gBACH,eAAe,CAAC,MAAM,EAAE,CAAC;gBAEzB,MAAM,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;gBACrC,MAAM,KAAK,GAAG,iBAAiB,EAAE,CAAC;gBAClC,MAAM,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;gBAEvC,IAAA,gBAAM,EAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC9D,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;gBAC7D,eAAe,CAAC,OAAO,EAAE,CAAC;gBAC1B,MAAM,QAAQ,GAAG,IAAI,SAAS,CAAC,SAAS,CAAC,yCAAyC,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;gBACxG,QAAQ,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,SAAS,EAAE,EAAE,IAAI,EAAE,SAAS,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;gBAE7E,MAAM,QAAQ,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;gBACjC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,GAAG,GAAG,EAAE;oBACvC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACvD,CAAC,CAAC;gBACF,MAAM,YAAY,GAAG,CAAC,GAAG,EAAE;oBACvB,IAAI,OAAe,CAAC;oBACpB,IAAI,KAAY,CAAC;oBACjB,OAAO;wBACH,KAAK,EAAE,CAAC,QAAgB,EAAE,IAAW,EAAE,EAAE;4BACrC,OAAO,GAAG,QAAQ,CAAC;4BACnB,KAAK,GAAG,IAAI,CAAC;wBACjB,CAAC;wBACD,KAAK,EAAE,GAAG,EAAE,GAAE,CAAC;wBACf,UAAU,EAAE,GAAG,EAAE,CAAC,OAAO;wBACzB,QAAQ,EAAE,GAAG,EAAE,CAAC,KAAK;qBACxB,CAAC;gBACN,CAAC,CAAC,EAAE,CAAC;gBAEL,eAAe,CAAC,SAAS,CAAC;oBACtB,YAAY,EAAE,GAAG,EAAE;wBACf,MAAM,IAAI,KAAK,CAAC,UAAU,CAAC,CAAC;oBAChC,CAAC;iBACJ,CAAC,CAAC;gBACH,eAAe,CAAC,MAAM,EAAE,CAAC;gBACzB,UAAI,CAAC,SAAS,CAAC,YAAmB,CAAC,CAAC;gBACpC,MAAM,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;gBACrC,MAAM,KAAK,GAAG,iBAAiB,EAAE,CAAC;gBAClC,IAAA,gBAAM,EAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC7B,IAAA,gBAAM,EAAC,YAAY,CAAC,UAAU,EAAE,CAAC,CAAC,IAAI,CAAC,+CAA+C,CAAC,CAAC;gBACxF,IAAA,gBAAM,EAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBACzD,UAAI,CAAC,SAAS,CAAC,IAAI,uBAAiB,EAAE,CAAC,CAAC;YAC5C,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;YACjC,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;gBAC3D,eAAe,CAAC,OAAO,EAAE,CAAC;gBAC1B,MAAM,QAAQ,GAAG,IAAI,SAAS,CAAC,SAAS,CAAC,yCAAyC,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;gBACxG,QAAQ,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,SAAS,EAAE,EAAE,IAAI,EAAE,SAAS,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;gBAC7E,eAAe,CAAC,SAAS,CAAC;oBACtB,mBAAmB,EAAE,IAAI;iBAC5B,CAAC,CAAC;gBACH,eAAe,CAAC,MAAM,EAAE,CAAC;gBAEzB,IAAI,CAAC;oBACD,MAAM,aAAO,CAAC,IAAI,CAAC,kBAAY,EAAE,KAAK,IAAI,EAAE;wBACxC,MAAM,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;oBAC5D,CAAC,CAAC,CAAC;gBACP,CAAC;gBAAC,WAAM,CAAC,CAAA,CAAC;gBAEV,MAAM,KAAK,GAAG,iBAAiB,EAAE,CAAC;gBAClC,IAAA,gBAAM,EAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACjC,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;YACxC,eAAe,CAAC,OAAO,EAAE,CAAC;YAC1B,MAAM,QAAQ,GAAG,IAAI,SAAS,CAAC,SAAS,CAAC,yCAAyC,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;YACxG,QAAQ,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,SAAS,EAAE,EAAE,IAAI,EAAE,SAAS,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;YAC7E,eAAe,CAAC,SAAS,CAAC;gBACtB,0BAA0B,EAAE,gBAAgB;aAC/C,CAAC,CAAC;YACH,eAAe,CAAC,MAAM,EAAE,CAAC;YACzB,IAAI,CAAC;gBACD,MAAM,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;YAC5D,CAAC;YAAC,WAAM,CAAC;gBACL,oCAAoC;YACxC,CAAC;YACD,MAAM,KAAK,GAAG,iBAAiB,EAAE,CAAC;YAClC,IAAA,gBAAM,EAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC7B,IAAA,gBAAM,EAAC,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC,CAAC,OAAO,CAAC,6BAA6B,CAAC,CAAC;QACzF,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;QAClB,EAAE,CAAC,uBAAuB,EAAE,KAAK,IAAI,EAAE;YACnC,IAAA,gBAAM,EAAC,IAAA,6BAAqB,EAAC,iCAAiC,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YACpF,IAAA,gBAAM,EAAC,IAAA,6BAAqB,EAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC5D,IAAA,gBAAM,EAAC,IAAA,6BAAqB,EAAC,oDAAoD,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAClG,IAAA,gBAAM,EACF,IAAA,6BAAqB,EAAC,4EAA4E,CAAC,CACtG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAChB,IAAA,gBAAM,EAAC,IAAA,6BAAqB,EAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACpD,IAAA,gBAAM,EAAC,IAAA,6BAAqB,EAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import 'mocha';\nimport expect from 'expect';\nimport { SequelizeInstrumentation } from '../src';\nimport { extractTableFromQuery } from '../src/utils';\nimport { ReadableSpan, Span } from '@opentelemetry/sdk-trace-base';\nimport { context, diag, SpanStatusCode, DiagConsoleLogger, ROOT_CONTEXT } from '@opentelemetry/api';\nimport {\n    SEMATTRS_DB_NAME,\n    SEMATTRS_DB_OPERATION,\n    SEMATTRS_DB_SQL_TABLE,\n    SEMATTRS_DB_STATEMENT,\n    SEMATTRS_DB_SYSTEM,\n    SEMATTRS_DB_USER,\n    SEMATTRS_NET_PEER_NAME,\n    SEMATTRS_NET_PEER_PORT,\n    SemanticAttributes,\n} from '@opentelemetry/semantic-conventions';\nimport { getTestSpans, registerInstrumentationTesting } from '@opentelemetry/contrib-test-utils';\n\n// should be available in node_modules from sequelize installation\nconst Promise = require('bluebird');\n\nconst instrumentation = registerInstrumentationTesting(new SequelizeInstrumentation());\nimport * as sequelize from 'sequelize';\n\ndescribe('instrumentation-sequelize', () => {\n    const getSequelizeSpans = (): ReadableSpan[] => {\n        return getTestSpans().filter((s) => s.instrumentationLibrary.name.includes('sequelize')) as ReadableSpan[];\n    };\n\n    beforeEach(() => {\n        instrumentation.enable();\n    });\n\n    afterEach(() => {\n        instrumentation.disable();\n    });\n\n    describe('postgres', () => {\n        const DB_SYSTEM = 'postgres';\n        const DB_USER = 'some-user';\n        const NET_PEER_NAME = 'localhost';\n        const NET_PEER_PORT = 12345;\n        const DB_NAME = 'my-db';\n\n        const instance = new sequelize.Sequelize(\n            `${DB_SYSTEM}://${DB_USER}@${NET_PEER_NAME}:${NET_PEER_PORT}/${DB_NAME}`,\n            { logging: false }\n        );\n        class User extends sequelize.Model {\n            firstName: string;\n        }\n\n        User.init({ firstName: { type: sequelize.DataTypes.STRING } }, { sequelize: instance });\n\n        it('create is instrumented', async () => {\n            try {\n                await User.create({ firstName: 'Nir' });\n            } catch {\n                // Error is thrown but we don't care\n            }\n            const spans = getSequelizeSpans();\n            expect(spans.length).toBe(1);\n            expect(spans[0].status.code).toBe(SpanStatusCode.ERROR);\n            const attributes = spans[0].attributes;\n\n            expect(attributes[SEMATTRS_DB_SYSTEM]).toBe(DB_SYSTEM);\n            expect(attributes[SEMATTRS_DB_USER]).toBe(DB_USER);\n            expect(attributes[SEMATTRS_NET_PEER_NAME]).toBe(NET_PEER_NAME);\n            expect(attributes[SEMATTRS_NET_PEER_PORT]).toBe(NET_PEER_PORT);\n            expect(attributes[SEMATTRS_DB_NAME]).toBe(DB_NAME);\n            expect(attributes[SEMATTRS_DB_OPERATION]).toBe('INSERT');\n            expect(attributes[SEMATTRS_DB_SQL_TABLE]).toBe('Users');\n            expect(attributes[SEMATTRS_DB_STATEMENT]).toBe(\n                'INSERT INTO \"Users\" (\"id\",\"firstName\",\"createdAt\",\"updatedAt\") VALUES (DEFAULT,$1,$2,$3) RETURNING *;'\n            );\n        });\n\n        it('findAll is instrumented', async () => {\n            await User.findAll().catch(() => {});\n            const spans = getSequelizeSpans();\n            expect(spans.length).toBe(1);\n            const attributes = spans[0].attributes;\n\n            expect(attributes[SEMATTRS_DB_OPERATION]).toBe('SELECT');\n            expect(attributes[SEMATTRS_DB_SQL_TABLE]).toBe('Users');\n            expect(attributes[SEMATTRS_DB_STATEMENT]).toBe(\n                'SELECT \"id\", \"firstName\", \"createdAt\", \"updatedAt\" FROM \"Users\" AS \"User\";'\n            );\n        });\n\n        it('destroy is instrumented', async () => {\n            await User.destroy({ where: {}, truncate: true }).catch(() => {});\n            const spans = getSequelizeSpans();\n            expect(spans.length).toBe(1);\n            const attributes = spans[0].attributes;\n\n            expect(attributes[SEMATTRS_DB_OPERATION]).toBe('BULKDELETE');\n            expect(attributes[SEMATTRS_DB_SQL_TABLE]).toBe('Users');\n            expect(attributes[SEMATTRS_DB_STATEMENT]).toBe('TRUNCATE \"Users\"');\n        });\n\n        it('count is instrumented', async () => {\n            await User.count().catch(() => {});\n            const spans = getSequelizeSpans();\n            expect(spans.length).toBe(1);\n            const attributes = spans[0].attributes;\n\n            expect(attributes[SEMATTRS_DB_OPERATION]).toBe('SELECT');\n            expect(attributes[SEMATTRS_DB_SQL_TABLE]).toBe('Users');\n            expect(attributes[SEMATTRS_DB_STATEMENT]).toBe('SELECT count(*) AS \"count\" FROM \"Users\" AS \"User\";');\n        });\n\n        it('handled complex query', async () => {\n            const Op = sequelize.Op;\n            await User.findOne({\n                where: {\n                    username: 'Shlomi',\n                    rank: {\n                        [Op.or]: {\n                            [Op.lt]: 1000,\n                            [Op.eq]: null,\n                        },\n                    },\n                },\n                attributes: ['id', 'username'],\n                order: [['username', 'DESC']],\n                limit: 10,\n                offset: 5,\n            }).catch(() => {});\n\n            const spans = getSequelizeSpans();\n            expect(spans.length).toBe(1);\n            const attributes = spans[0].attributes;\n\n            expect(attributes[SEMATTRS_DB_OPERATION]).toBe('SELECT');\n            expect(attributes[SEMATTRS_DB_SQL_TABLE]).toBe('Users');\n            expect(attributes[SEMATTRS_DB_STATEMENT]).toBe(\n                `SELECT \"id\", \"username\" FROM \"Users\" AS \"User\" WHERE \"User\".\"username\" = 'Shlomi' AND (\"User\".\"rank\" < 1000 OR \"User\".\"rank\" IS NULL) ORDER BY \"User\".\"username\" DESC LIMIT 10 OFFSET 5;`\n            );\n        });\n\n        it('tableName is taken from init override', async () => {\n            class Planet extends sequelize.Model {}\n            const expectedTableName = 'solar-system';\n            Planet.init({}, { sequelize: instance, tableName: expectedTableName });\n\n            await Planet.findAll().catch(() => {});\n            const spans = getSequelizeSpans();\n            expect(spans.length).toBe(1);\n            const attributes = spans[0].attributes;\n            expect(attributes[SEMATTRS_DB_SQL_TABLE]).toBe(expectedTableName);\n        });\n\n        it('handles JOIN queries', async () => {\n            class Dog extends sequelize.Model {\n                firstName: string;\n            }\n\n            Dog.init(\n                { firstName: { type: sequelize.DataTypes.STRING }, owner: { type: sequelize.DataTypes.STRING } },\n                { sequelize: instance }\n            );\n            Dog.belongsTo(User, { foreignKey: 'firstName' });\n            User.hasMany(Dog, { foreignKey: 'firstName' });\n\n            await Dog.findOne({\n                attributes: ['firstName', 'owner'],\n                include: [\n                    {\n                        model: User,\n                        attributes: ['firstName'],\n                        required: true,\n                    },\n                ],\n            }).catch(() => {});\n\n            const spans = getSequelizeSpans();\n            expect(spans.length).toBe(1);\n            const attributes = spans[0].attributes;\n\n            expect(attributes[SEMATTRS_DB_OPERATION]).toBe('SELECT');\n            expect(attributes[SEMATTRS_DB_SQL_TABLE]).toBe('Dogs,Users');\n            expect(attributes[SEMATTRS_DB_STATEMENT]).toBe(\n                `SELECT \"Dog\".\"id\", \"Dog\".\"firstName\", \"Dog\".\"owner\", \"User\".\"id\" AS \"User.id\", \"User\".\"firstName\" AS \"User.firstName\" FROM \"Dogs\" AS \"Dog\" INNER JOIN \"Users\" AS \"User\" ON \"Dog\".\"firstName\" = \"User\".\"id\" LIMIT 1;`\n            );\n        });\n    });\n\n    describe('mysql', () => {\n        const DB_SYSTEM = 'mysql';\n        const DB_USER = 'RickSanchez';\n        const NET_PEER_NAME = 'localhost';\n        const NET_PEER_PORT = 34567;\n        const DB_NAME = 'mysql-db';\n\n        const instance = new sequelize.Sequelize(DB_NAME, DB_USER, 'password', {\n            host: NET_PEER_NAME,\n            port: NET_PEER_PORT,\n            dialect: DB_SYSTEM,\n        });\n\n        instance.define('User', { firstName: { type: sequelize.DataTypes.STRING } });\n\n        it('create is instrumented', async () => {\n            await instance.models.User.create({ firstName: 'Nir' }).catch(() => {});\n            const spans = getSequelizeSpans();\n            expect(spans.length).toBe(1);\n            expect(spans[0].status.code).toBe(SpanStatusCode.ERROR);\n            const attributes = spans[0].attributes;\n\n            expect(attributes[SEMATTRS_DB_SYSTEM]).toBe(DB_SYSTEM);\n            expect(attributes[SEMATTRS_DB_USER]).toBe(DB_USER);\n            expect(attributes[SEMATTRS_NET_PEER_NAME]).toBe(NET_PEER_NAME);\n            expect(attributes[SEMATTRS_NET_PEER_PORT]).toBe(NET_PEER_PORT);\n            expect(attributes[SEMATTRS_DB_NAME]).toBe(DB_NAME);\n            expect(attributes[SEMATTRS_DB_OPERATION]).toBe('INSERT');\n            expect(attributes[SEMATTRS_DB_SQL_TABLE]).toBe('Users');\n            expect(attributes[SEMATTRS_DB_STATEMENT]).toBe(\n                'INSERT INTO `Users` (`id`,`firstName`,`createdAt`,`updatedAt`) VALUES (DEFAULT,$1,$2,$3);'\n            );\n        });\n\n        it('findAll is instrumented', async () => {\n            await instance.models.User.findAll().catch(() => {});\n            const spans = getSequelizeSpans();\n            expect(spans.length).toBe(1);\n            const attributes = spans[0].attributes;\n\n            expect(attributes[SEMATTRS_DB_OPERATION]).toBe('SELECT');\n            expect(attributes[SEMATTRS_DB_SQL_TABLE]).toBe('Users');\n            expect(attributes[SEMATTRS_DB_STATEMENT]).toBe(\n                'SELECT `id`, `firstName`, `createdAt`, `updatedAt` FROM `Users` AS `User`;'\n            );\n        });\n\n        describe('query is instrumented', () => {\n            it('with options not specified', async () => {\n                try {\n                    await instance.query('SELECT 1 + 1');\n                } catch {\n                    // Do not care about the error\n                }\n                const spans = getSequelizeSpans();\n                expect(spans.length).toBe(1);\n                const attributes = spans[0].attributes;\n\n                expect(attributes[SEMATTRS_DB_OPERATION]).toBe('SELECT');\n                expect(attributes[SEMATTRS_DB_STATEMENT]).toBe('SELECT 1 + 1');\n            });\n            it('with type not specified in options', async () => {\n                try {\n                    await instance.query('SELECT 1 + 1', {});\n                } catch {\n                    // Do not care about the error\n                }\n                const spans = getSequelizeSpans();\n                expect(spans.length).toBe(1);\n                const attributes = spans[0].attributes;\n\n                expect(attributes[SEMATTRS_DB_OPERATION]).toBe('SELECT');\n                expect(attributes[SEMATTRS_DB_STATEMENT]).toBe('SELECT 1 + 1');\n            });\n\n            it('with type specified in options', async () => {\n                try {\n                    await instance.query('SELECT 1 + 1', { type: sequelize.QueryTypes.RAW });\n                } catch {\n                    // Do not care about the error\n                }\n                const spans = getSequelizeSpans();\n                expect(spans.length).toBe(1);\n                const attributes = spans[0].attributes;\n\n                expect(attributes[SEMATTRS_DB_OPERATION]).toBe('RAW');\n                expect(attributes[SEMATTRS_DB_STATEMENT]).toBe('SELECT 1 + 1');\n            });\n        });\n    });\n\n    describe('sqlite', () => {\n        const instance = new sequelize.Sequelize('sqlite:memory', {\n            logging: false,\n        });\n        instance.define('User', { firstName: { type: sequelize.DataTypes.STRING } });\n\n        it('create is instrumented', async () => {\n            await instance.models.User.create({ firstName: 'Nir' }).catch(() => {});\n            const spans = getSequelizeSpans();\n            expect(spans.length).toBe(1);\n            const attributes = spans[0].attributes;\n            expect(attributes[SEMATTRS_DB_SYSTEM]).toBe('sqlite');\n            expect(attributes[SEMATTRS_NET_PEER_NAME]).toBe('memory');\n            expect(attributes[SEMATTRS_DB_OPERATION]).toBe('INSERT');\n            expect(attributes[SEMATTRS_DB_SQL_TABLE]).toBe('Users');\n            expect(attributes[SEMATTRS_DB_STATEMENT]).toBe(\n                'INSERT INTO `Users` (`id`,`firstName`,`createdAt`,`updatedAt`) VALUES (NULL,$1,$2,$3);'\n            );\n        });\n    });\n\n    describe('config', () => {\n        describe('queryHook', () => {\n            it('able to collect query', async () => {\n                instrumentation.disable();\n                const instance = new sequelize.Sequelize(`postgres://john@$localhost:1111/my-name`, { logging: false });\n                instance.define('User', { firstName: { type: sequelize.DataTypes.STRING } });\n\n                const response = { john: 'doe' };\n                sequelize.Sequelize.prototype.query = () => {\n                    return new Promise((resolve) => resolve(response));\n                };\n                instrumentation.setConfig({\n                    queryHook: (span: Span, { sql, option }: { sql: any; option: any }) => {\n                        span.setAttribute('test-sql', 'any');\n                        span.setAttribute('test-option', 'any');\n                    },\n                });\n                instrumentation.enable();\n\n                await instance.models.User.findAll();\n                const spans = getSequelizeSpans();\n                const attributes = spans[0].attributes;\n\n                expect(attributes['test-sql']).toBe('any');\n                expect(attributes['test-option']).toBe('any');\n            });\n\n            it('query hook which throws does not affect span', async () => {\n                instrumentation.disable();\n                const instance = new sequelize.Sequelize(`postgres://john@$localhost:1111/my-name`, { logging: false });\n                instance.define('User', { firstName: { type: sequelize.DataTypes.STRING } });\n\n                const response = { john: 'doe' };\n                sequelize.Sequelize.prototype.query = () => {\n                    return new Promise((resolve) => resolve(response));\n                };\n                const mockedLogger = (() => {\n                    let message: string;\n                    let error: Error;\n                    return {\n                        error: (_message: string, _err: Error) => {\n                            message = _message;\n                            error = _err;\n                        },\n                        debug: () => {},\n                        getMessage: () => message,\n                        getError: () => error,\n                    };\n                })();\n\n                instrumentation.setConfig({\n                    queryHook: () => {\n                        throw new Error('Throwing');\n                    },\n                });\n                instrumentation.enable();\n                diag.setLogger(mockedLogger as any);\n                await instance.models.User.findAll();\n                const spans = getSequelizeSpans();\n                expect(spans.length).toBe(1);\n                expect(mockedLogger.getMessage()).toBe('sequelize instrumentation: queryHook error');\n                expect(mockedLogger.getError().message).toBe('Throwing');\n                diag.setLogger(new DiagConsoleLogger());\n            });\n        });\n\n        describe('responseHook', () => {\n            it('able to collect response', async () => {\n                instrumentation.disable();\n                const instance = new sequelize.Sequelize(`postgres://john@$localhost:1111/my-name`, { logging: false });\n                instance.define('User', { firstName: { type: sequelize.DataTypes.STRING } });\n\n                const response = { john: 'doe' };\n                sequelize.Sequelize.prototype.query = () => {\n                    return new Promise((resolve) => resolve(response));\n                };\n                instrumentation.setConfig({\n                    responseHook: (span: Span, response: any) => {\n                        span.setAttribute('test', JSON.stringify(response));\n                    },\n                });\n                instrumentation.enable();\n\n                await instance.models.User.findAll();\n                const spans = getSequelizeSpans();\n                const attributes = spans[0].attributes;\n\n                expect(attributes['test']).toBe(JSON.stringify(response));\n            });\n\n            it('response hook which throws does not affect span', async () => {\n                instrumentation.disable();\n                const instance = new sequelize.Sequelize(`postgres://john@$localhost:1111/my-name`, { logging: false });\n                instance.define('User', { firstName: { type: sequelize.DataTypes.STRING } });\n\n                const response = { john: 'doe' };\n                sequelize.Sequelize.prototype.query = () => {\n                    return new Promise((resolve) => resolve(response));\n                };\n                const mockedLogger = (() => {\n                    let message: string;\n                    let error: Error;\n                    return {\n                        error: (_message: string, _err: Error) => {\n                            message = _message;\n                            error = _err;\n                        },\n                        debug: () => {},\n                        getMessage: () => message,\n                        getError: () => error,\n                    };\n                })();\n\n                instrumentation.setConfig({\n                    responseHook: () => {\n                        throw new Error('Throwing');\n                    },\n                });\n                instrumentation.enable();\n                diag.setLogger(mockedLogger as any);\n                await instance.models.User.findAll();\n                const spans = getSequelizeSpans();\n                expect(spans.length).toBe(1);\n                expect(mockedLogger.getMessage()).toBe('sequelize instrumentation: responseHook error');\n                expect(mockedLogger.getError().message).toBe('Throwing');\n                diag.setLogger(new DiagConsoleLogger());\n            });\n        });\n\n        describe('ignoreOrphanedSpans', () => {\n            it('skips when ignoreOrphanedSpans option is true', async () => {\n                instrumentation.disable();\n                const instance = new sequelize.Sequelize(`postgres://john@$localhost:1111/my-name`, { logging: false });\n                instance.define('User', { firstName: { type: sequelize.DataTypes.STRING } });\n                instrumentation.setConfig({\n                    ignoreOrphanedSpans: true,\n                });\n                instrumentation.enable();\n\n                try {\n                    await context.with(ROOT_CONTEXT, async () => {\n                        await instance.models.User.create({ firstName: 'Nir' });\n                    });\n                } catch {}\n\n                const spans = getSequelizeSpans();\n                expect(spans.length).toBe(0);\n            });\n        });\n\n        it('moduleVersionAttributeName', async () => {\n            instrumentation.disable();\n            const instance = new sequelize.Sequelize(`postgres://john@$localhost:1111/my-name`, { logging: false });\n            instance.define('User', { firstName: { type: sequelize.DataTypes.STRING } });\n            instrumentation.setConfig({\n                moduleVersionAttributeName: 'module.version',\n            });\n            instrumentation.enable();\n            try {\n                await instance.models.User.create({ firstName: 'Nir' });\n            } catch {\n                // Error is thrown but we don't care\n            }\n            const spans = getSequelizeSpans();\n            expect(spans.length).toBe(1);\n            expect(spans[0].attributes['module.version']).toMatch(/\\d{1,4}\\.\\d{1,4}\\.\\d{1,5}.*/);\n        });\n    });\n\n    describe('misc', () => {\n        it('extractTableFromQuery', async () => {\n            expect(extractTableFromQuery('FROM Users JOIN Dogs Where 1243')).toBe('Dogs,Users');\n            expect(extractTableFromQuery('FROM \"Users\"')).toBe('Users');\n            expect(extractTableFromQuery('SELECT count(*) AS \"count\" FROM \"Users\" AS \"User\";')).toBe('Users');\n            expect(\n                extractTableFromQuery('SELECT `id`, `firstName`, `createdAt`, `updatedAt` FROM `Users` AS `User`;')\n            ).toBe('Users');\n            expect(extractTableFromQuery(null)).toBe(undefined);\n            expect(extractTableFromQuery(undefined)).toBe(undefined);\n        });\n    });\n});\n"]}