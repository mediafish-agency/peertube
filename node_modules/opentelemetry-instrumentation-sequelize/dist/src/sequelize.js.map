{"version":3,"file":"sequelize.js","sourceRoot":"","sources":["../../src/sequelize.ts"],"names":[],"mappings":"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","sourcesContent":["import { context, Span, SpanKind, SpanStatusCode, trace, diag } from '@opentelemetry/api';\nimport { suppressTracing } from '@opentelemetry/core';\nimport {\n    NetTransportValues,\n    SEMATTRS_NET_TRANSPORT,\n    SEMATTRS_DB_NAME,\n    SEMATTRS_DB_OPERATION,\n    SEMATTRS_DB_SQL_TABLE,\n    SEMATTRS_DB_STATEMENT,\n    SEMATTRS_DB_SYSTEM,\n    SEMATTRS_DB_USER,\n    SEMATTRS_NET_PEER_NAME,\n    SEMATTRS_NET_PEER_PORT,\n    SemanticAttributes,\n} from '@opentelemetry/semantic-conventions';\nimport * as sequelize from 'sequelize';\nimport { SequelizeInstrumentationConfig } from './types';\nimport { VERSION } from './version';\nimport { extractTableFromQuery } from './utils';\nimport {\n    InstrumentationBase,\n    InstrumentationModuleDefinition,\n    InstrumentationNodeModuleDefinition,\n    InstrumentationNodeModuleFile,\n    isWrapped,\n    safeExecuteInTheMiddle,\n} from '@opentelemetry/instrumentation';\n\nexport class SequelizeInstrumentation extends InstrumentationBase {\n    static readonly component = 'sequelize';\n    protected override _config!: SequelizeInstrumentationConfig;\n    private moduleVersion: string;\n\n    constructor(config: SequelizeInstrumentationConfig = {}) {\n        super('opentelemetry-instrumentation-sequelize', VERSION, Object.assign({}, config));\n    }\n\n    override setConfig(config: SequelizeInstrumentationConfig = {}) {\n        this._config = Object.assign({}, config);\n    }\n\n    protected init(): InstrumentationModuleDefinition {\n        const connectionManagerInstrumentation = new InstrumentationNodeModuleFile(\n            'sequelize/lib/dialects/abstract/connection-manager.js',\n            ['*'],\n            this.patchConnectionManager.bind(this),\n            this.unpatchConnectionManager.bind(this)\n        );\n\n        const module = new InstrumentationNodeModuleDefinition(\n            SequelizeInstrumentation.component,\n            ['*'],\n            this.patch.bind(this),\n            this.unpatch.bind(this),\n            [connectionManagerInstrumentation]\n        );\n        return module;\n    }\n\n    protected patchConnectionManager(moduleExports: any): any {\n        if (moduleExports === undefined || moduleExports === null) {\n            return moduleExports;\n        }\n        diag.debug(`sequelize instrumentation: applying patch to sequelize ConnectionManager`);\n        this.unpatchConnectionManager(moduleExports);\n        this._wrap(moduleExports.ConnectionManager.prototype, 'getConnection', this._getConnectionPatch.bind(this));\n        return moduleExports;\n    }\n\n    protected unpatchConnectionManager(moduleExports: any): any {\n        if (isWrapped(moduleExports?.ConnectionManager?.prototype?.getConnection)) {\n            this._unwrap(moduleExports.ConnectionManager.prototype, 'getConnection');\n        }\n        return moduleExports;\n    }\n\n    protected patch(moduleExports: typeof sequelize, moduleVersion: string) {\n        this.moduleVersion = moduleVersion;\n        if (moduleExports === undefined || moduleExports === null) {\n            return moduleExports;\n        }\n\n        diag.debug(`sequelize instrumentation: applying patch to sequelize`);\n        this.unpatch(moduleExports);\n        this._wrap(moduleExports.Sequelize.prototype, 'query', this._createQueryPatch.bind(this));\n\n        return moduleExports;\n    }\n\n    protected unpatch(moduleExports: typeof sequelize): void {\n        if (isWrapped(moduleExports.Sequelize.prototype.query)) {\n            this._unwrap(moduleExports.Sequelize.prototype, 'query');\n        }\n    }\n\n    // run getConnection with suppressTracing, as it might call internally to `databaseVersion` function\n    // which calls `query` and create internal span which we don't need to instrument\n    private _getConnectionPatch(original: Function) {\n        return function (...args: unknown[]) {\n            return context.with(suppressTracing(context.active()), () => original.apply(this, args));\n        };\n    }\n\n    private _createQueryPatch(original: Function) {\n        const self = this;\n        return function (sql: any, option: any) {\n            if (self._config?.ignoreOrphanedSpans && !trace.getSpan(context.active())) {\n                return original.apply(this, arguments);\n            }\n\n            let statement = sql?.query ? sql.query : sql;\n            let operation = option?.type;\n\n            if (typeof statement === 'string') {\n                statement = statement.trim();\n                if (!operation) operation = statement.split(' ')[0];\n            }\n\n            const sequelizeInstance: sequelize.Sequelize = this;\n            const config = sequelizeInstance?.config;\n\n            let tableName = option?.instance?.constructor?.tableName;\n            if (!tableName) {\n                if (Array.isArray(option?.tableNames) && option.tableNames.length > 0)\n                    tableName = option?.tableNames.sort().join(',');\n                else tableName = extractTableFromQuery(statement);\n            }\n\n            const attributes = {\n                [SEMATTRS_DB_SYSTEM]: sequelizeInstance.getDialect(),\n                [SEMATTRS_DB_USER]: config?.username,\n                [SEMATTRS_NET_PEER_NAME]: config?.host,\n                [SEMATTRS_NET_PEER_PORT]: config?.port ? Number(config?.port) : undefined,\n                [SEMATTRS_NET_TRANSPORT]: self._getNetTransport(config?.protocol),\n                [SEMATTRS_DB_NAME]: config?.database,\n                [SEMATTRS_DB_OPERATION]: operation,\n                [SEMATTRS_DB_STATEMENT]: statement,\n                [SEMATTRS_DB_SQL_TABLE]: tableName,\n                // [SEMATTRS_NET_PEER_IPPEER_IP]: '?', // Part of protocol\n            };\n\n            if (self._config.moduleVersionAttributeName) {\n                attributes[self._config.moduleVersionAttributeName] = self.moduleVersion;\n            }\n\n            Object.entries(attributes).forEach(([key, value]) => {\n                if (value === undefined) delete attributes[key];\n            });\n\n            const newSpan: Span = self.tracer.startSpan(`Sequelize ${operation}`, {\n                kind: SpanKind.CLIENT,\n                attributes,\n            });\n\n            const activeContextWithSpan = trace.setSpan(context.active(), newSpan);\n\n            if (self._config?.queryHook) {\n                safeExecuteInTheMiddle(\n                    () => self._config.queryHook(newSpan, { sql, option }),\n                    (e: Error) => {\n                        if (e) diag.error('sequelize instrumentation: queryHook error', e);\n                    },\n                    true\n                );\n            }\n\n            return context\n                .with(\n                    self._config.suppressInternalInstrumentation\n                        ? suppressTracing(activeContextWithSpan)\n                        : activeContextWithSpan,\n                    () => original.apply(this, arguments)\n                )\n                .then((response: any) => {\n                    if (self._config?.responseHook) {\n                        safeExecuteInTheMiddle(\n                            () => self._config.responseHook(newSpan, response),\n                            (e: Error) => {\n                                if (e) diag.error('sequelize instrumentation: responseHook error', e);\n                            },\n                            true\n                        );\n                    }\n                    return response;\n                })\n                .catch((err: Error) => {\n                    newSpan.setStatus({\n                        code: SpanStatusCode.ERROR,\n                        message: err.message,\n                    });\n                    throw err;\n                })\n                .finally(() => {\n                    newSpan.end();\n                });\n        };\n    }\n\n    private _getNetTransport(protocol: string) {\n        switch (protocol) {\n            case 'tcp':\n                return NetTransportValues.IP_TCP;\n            default:\n                return undefined;\n        }\n    }\n}\n"]}