{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/types.ts"],"names":[],"mappings":"","sourcesContent":["import { Span } from '@opentelemetry/api';\nimport { InstrumentationConfig } from '@opentelemetry/instrumentation';\nimport type { Sequelize } from 'sequelize';\n\nexport interface SequelizeQueryHookParams {\n    /** The type of sql parameter depends on the database dialect. */\n    sql: Parameters<Sequelize['query']>[0];\n    /** The type of option parameter depends on the database dialect. */\n    option: Parameters<Sequelize['query']>[1];\n}\n\nexport type SequelizeQueryHook = (span: Span, params: SequelizeQueryHookParams) => void;\n\nexport type SequelizeResponseCustomAttributesFunction = (span: Span, response: any) => void;\n\nexport interface SequelizeInstrumentationConfig extends InstrumentationConfig {\n    /** hook for adding custom attributes using the query */\n    queryHook?: SequelizeQueryHook;\n    /** hook for adding custom attributes using the response payload */\n    responseHook?: SequelizeResponseCustomAttributesFunction;\n    /** Set to true if you only want to trace operation which has parent spans */\n    ignoreOrphanedSpans?: boolean;\n    /**\n     * If passed, a span attribute will be added to all spans with key of the provided \"moduleVersionAttributeName\"\n     * and value of the module version.\n     */\n    moduleVersionAttributeName?: string;\n    /**\n     * Sequelize operation use postgres/mysql/mariadb/etc. under the hood.\n     * If, for example, postgres instrumentation is enabled, a postgres operation will also create\n     * a postgres span describing the communication.\n     * Setting the `suppressInternalInstrumentation` config value to `true` will\n     * cause the instrumentation to suppress instrumentation of underlying operations.\n     */\n    suppressInternalInstrumentation?: boolean;\n}\n"]}